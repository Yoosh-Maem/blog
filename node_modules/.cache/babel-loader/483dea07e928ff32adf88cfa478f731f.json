{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport React, { Fragment, useContext } from 'react';\nimport { EditorContext } from '../../Context';\nimport Child from './Child';\nimport \"./index.css\";\nexport default function Toolbar() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var prefixCls = props.prefixCls;\n\n  var _useContext = useContext(EditorContext),\n      commands = _useContext.commands,\n      fullscreen = _useContext.fullscreen,\n      preview = _useContext.preview,\n      _useContext$barPopup = _useContext.barPopup,\n      barPopup = _useContext$barPopup === void 0 ? {} : _useContext$barPopup,\n      commandOrchestrator = _useContext.commandOrchestrator,\n      dispatch = _useContext.dispatch;\n\n  function handleClick(command, name) {\n    if (!dispatch) return;\n    var state = {\n      barPopup: _objectSpread({}, barPopup)\n    };\n\n    if (command.keyCommand === 'preview') {\n      state.preview = command.value;\n    }\n\n    if (command.keyCommand === 'fullscreen') {\n      state.fullscreen = !fullscreen;\n      document.body.style.overflow = fullscreen ? 'initial' : 'hidden';\n    }\n\n    if (commands && command.keyCommand === 'group') {\n      commands.forEach(function (item) {\n        if (name === item.groupName) {\n          state.barPopup[name] = true;\n        } else if (item.keyCommand) {\n          state.barPopup[item.groupName] = false;\n        }\n      });\n    } else if (name || command.parent) {\n      Object.keys(state.barPopup || {}).forEach(function (keyName) {\n        state.barPopup[keyName] = false;\n      });\n    }\n\n    if (Object.keys(state).length) {\n      dispatch(_objectSpread({}, state));\n    }\n\n    commandOrchestrator && commandOrchestrator.executeCommand(command);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-toolbar\")\n  }, /*#__PURE__*/React.createElement(\"ul\", null, (props.commands || commands || []).map(function (item, idx) {\n    if (item.keyCommand === 'divider') {\n      return /*#__PURE__*/React.createElement(\"li\", _extends({\n        key: idx\n      }, item.liProps, {\n        className: \"\".concat(prefixCls, \"-toolbar-divider\")\n      }));\n    }\n\n    if (!item.keyCommand) return /*#__PURE__*/React.createElement(Fragment, null);\n    var activeBtn = fullscreen && item.keyCommand === 'fullscreen' || item.keyCommand === 'preview' && preview === item.value;\n    var childNode = typeof item.children === 'function' ? item.children({\n      getState: function getState() {\n        return commandOrchestrator.getState();\n      },\n      textApi: commandOrchestrator ? commandOrchestrator.textApi : undefined,\n      close: function close() {\n        return handleClick({}, item.groupName);\n      },\n      execute: function execute() {\n        return handleClick({\n          execute: item.execute\n        });\n      }\n    }) : undefined;\n    var disabled = barPopup && preview && preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand);\n    return /*#__PURE__*/React.createElement(\"li\", _extends({\n      key: idx\n    }, item.liProps, {\n      className: activeBtn ? \"active\" : ''\n    }), !item.buttonProps && item.icon, item.buttonProps && /*#__PURE__*/React.createElement('button', _objectSpread(_objectSpread({\n      type: 'button',\n      disabled: disabled,\n      'data-name': item.name\n    }, item.buttonProps), {}, {\n      onClick: function onClick(evn) {\n        evn.stopPropagation();\n        handleClick(item, item.groupName);\n      }\n    }), item.icon), item.children && /*#__PURE__*/React.createElement(Child, {\n      groupName: item.groupName,\n      prefixCls: prefixCls,\n      children: childNode,\n      commands: Array.isArray(item.children) && typeof item.children !== 'function' ? item.children : undefined\n    }));\n  })));\n}","map":{"version":3,"sources":["../../../../src/components/Toolbar/index.tsx"],"names":["props","prefixCls","commands","fullscreen","preview","barPopup","commandOrchestrator","dispatch","useContext","state","command","document","name","item","Object","idx","activeBtn","childNode","getState","textApi","close","handleClick","execute","disabled","type","onClick","evn","Array","undefined"],"mappings":"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","sourcesContent":["import React, { Fragment, useContext } from 'react';\nimport { IProps } from '../../utils';\nimport { EditorContext, PreviewType, ContextStore } from '../../Context';\nimport { ICommand } from '../../commands';\nimport Child from './Child';\nimport './index.less';\n\nexport interface IToolbarProps extends IProps {\n  onCommand?: (command: ICommand<string>, groupName?: string) => void;\n  commands?: ICommand<string>[];\n}\n\nexport default function Toolbar(props: IToolbarProps = {}) {\n  const { prefixCls } = props;\n  const { commands, fullscreen, preview, barPopup = {}, commandOrchestrator, dispatch } = useContext(EditorContext);\n  function handleClick(command: ICommand<string>, name?: string) {\n    if (!dispatch) return;\n    const state: ContextStore = { barPopup: { ...barPopup } };\n    if (command.keyCommand === 'preview') {\n      state.preview = command.value as PreviewType;\n    }\n    if (command.keyCommand === 'fullscreen') {\n      state.fullscreen = !fullscreen;\n      document.body.style.overflow = fullscreen ? 'initial' : 'hidden';\n    }\n    if (commands && command.keyCommand === 'group') {\n      commands.forEach((item) => {\n        if (name === item.groupName) {\n          state.barPopup![name!] = true;\n        } else if (item.keyCommand) {\n          state.barPopup![item.groupName!] = false;\n        }\n      });\n    } else if (name || command.parent) {\n      Object.keys(state.barPopup || {}).forEach((keyName) => {\n        state.barPopup![keyName] = false;\n      });\n    }\n\n    if (Object.keys(state).length) {\n      dispatch({ ...state });\n    }\n    commandOrchestrator && commandOrchestrator.executeCommand(command);\n  }\n  return (\n    <div className={`${prefixCls}-toolbar`}>\n      <ul>\n        {(props.commands || commands || []).map((item, idx) => {\n          if (item.keyCommand === 'divider') {\n            return <li key={idx} {...item.liProps} className={`${prefixCls}-toolbar-divider`} />;\n          }\n          if (!item.keyCommand) return <Fragment />;\n          const activeBtn =\n            (fullscreen && item.keyCommand === 'fullscreen') ||\n            (item.keyCommand === 'preview' && preview === item.value);\n          const childNode =\n            typeof item.children === 'function'\n              ? item.children({\n                  getState: () => commandOrchestrator!.getState(),\n                  textApi: commandOrchestrator ? commandOrchestrator!.textApi : undefined,\n                  close: () => handleClick({}, item.groupName),\n                  execute: () => handleClick({ execute: item.execute }),\n                })\n              : undefined;\n          const disabled =\n            barPopup && preview && preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand);\n          return (\n            <li key={idx} {...item.liProps} className={activeBtn ? `active` : ''}>\n              {!item.buttonProps && item.icon}\n              {item.buttonProps &&\n                React.createElement(\n                  'button',\n                  {\n                    type: 'button',\n                    disabled,\n                    'data-name': item.name,\n                    ...item.buttonProps,\n                    onClick: (evn: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                      evn.stopPropagation();\n                      handleClick(item, item.groupName);\n                    },\n                  },\n                  item.icon,\n                )}\n              {item.children && (\n                <Child\n                  groupName={item.groupName}\n                  prefixCls={prefixCls}\n                  children={childNode}\n                  commands={\n                    Array.isArray(item.children) && typeof item.children !== 'function' ? item.children : undefined\n                  }\n                />\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}