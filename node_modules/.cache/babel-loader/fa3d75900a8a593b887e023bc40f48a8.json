{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React, { useContext, useEffect, useMemo } from 'react';\nimport { EditorContext } from '../../Context';\nimport { TextAreaCommandOrchestrator } from '../../commands';\nimport handleKeyDown from './handleKeyDown';\nimport shortcuts from './shortcuts';\nimport \"./index.css\";\nexport default function Textarea(props) {\n  var prefixCls = props.prefixCls,\n      other = _objectWithoutProperties(props, [\"prefixCls\"]);\n\n  var _useContext = useContext(EditorContext),\n      markdown = _useContext.markdown,\n      commands = _useContext.commands,\n      tabSize = _useContext.tabSize,\n      _onChange = _useContext.onChange,\n      dispatch = _useContext.dispatch;\n\n  var textRef = /*#__PURE__*/React.createRef();\n  var executeRef = React.useRef();\n  useEffect(function () {\n    if (textRef.current && dispatch) {\n      var commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);\n      executeRef.current = commandOrchestrator;\n      dispatch({\n        textarea: textRef.current,\n        commandOrchestrator: commandOrchestrator\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  return useMemo(function () {\n    return /*#__PURE__*/React.createElement(\"textarea\", _extends({}, other, {\n      ref: textRef,\n      className: \"\".concat(prefixCls, \"-text-input\"),\n      value: markdown,\n      onScroll: props.onScroll,\n      onKeyDown: function onKeyDown(e) {\n        handleKeyDown(e, tabSize);\n        shortcuts(e, commands, executeRef.current);\n      },\n      onChange: function onChange(e) {\n        dispatch && dispatch({\n          markdown: e.target.value\n        });\n        _onChange && _onChange(e.target.value);\n      }\n    }));\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [markdown]);\n}","map":{"version":3,"sources":["../../../../src/components/TextArea/Textarea.tsx"],"names":["prefixCls","other","props","markdown","commands","tabSize","onChange","dispatch","useContext","textRef","React","executeRef","useEffect","commandOrchestrator","textarea","useMemo","handleKeyDown","shortcuts","e","value"],"mappings":";;AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,SAAA,EAAA,OAAA,QAAA,OAAA;AAEA,SAAA,aAAA,QAAA,eAAA;AACA,SAAA,2BAAA,QAAA,gBAAA;AACA,OAAA,aAAA,MAAA,iBAAA;AACA,OAAA,SAAA,MAAA,aAAA;AACA,OAAA,aAAA;AAQA,eAAe,SAAA,QAAA,CAAA,KAAA,EAAwC;AAAA,MAC7CA,SAD6C,GACrBE,KADqB,CAAA,SAAA;AAAA,MAC/BD,KAD+B,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,WAAA,CAAA,CAAA;;AAAA,MAAA,WAAA,GAEOO,UAAU,CAFjB,aAEiB,CAFjB;AAAA,MAE7CL,QAF6C,GAAA,WAAA,CAAA,QAAA;AAAA,MAEnCC,QAFmC,GAAA,WAAA,CAAA,QAAA;AAAA,MAEzBC,OAFyB,GAAA,WAAA,CAAA,OAAA;AAAA,MAEhBC,SAFgB,GAAA,WAAA,CAAA,QAAA;AAAA,MAENC,QAFM,GAAA,WAAA,CAAA,QAAA;;AAGrD,MAAME,OAAO,GAAA,aAAGC,KAAK,CAArB,SAAgBA,EAAhB;AACA,MAAMC,UAAU,GAAGD,KAAK,CAAxB,MAAmBA,EAAnB;AACAE,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIH,OAAO,CAAPA,OAAAA,IAAJ,QAAA,EAAiC;AAC/B,UAAMI,mBAAmB,GAAG,IAAA,2BAAA,CAAgCJ,OAAO,CAAnE,OAA4B,CAA5B;AACAE,MAAAA,UAAU,CAAVA,OAAAA,GAAAA,mBAAAA;AACAJ,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,QAAQ,EAAEL,OAAO,CAAnB,OAAA;AAA6BI,QAAAA,mBAAmB,EAAnBA;AAA7B,OAAD,CAARN;AAJY,KAAA,CAMd;;AANO,GAAA,EAATK,EAAS,CAATA;AAQA,SAAOG,OAAO,CACZ,YAAA;AAAA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEE,MAAA,GAAG,EAFL,OAAA;AAGE,MAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAHX,aAGW,CAHX;AAIE,MAAA,KAAK,EAJP,QAAA;AAKE,MAAA,QAAQ,EAAEb,KAAK,CALjB,QAAA;AAME,MAAA,SAAS,EAAE,SAAA,SAAA,CAAA,CAAA,EAAO;AAChBc,QAAAA,aAAa,CAAA,CAAA,EAAbA,OAAa,CAAbA;AACAC,QAAAA,SAAS,CAAA,CAAA,EAAA,QAAA,EAAcN,UAAU,CAAjCM,OAAS,CAATA;AARJ,OAAA;AAUE,MAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,CAAA,EAAO;AACfV,QAAAA,QAAQ,IAAIA,QAAQ,CAAC;AAAEJ,UAAAA,QAAQ,EAAEe,CAAC,CAADA,MAAAA,CAASC;AAArB,SAAD,CAApBZ;AACAD,QAAAA,SAAQ,IAAIA,SAAQ,CAACY,CAAC,CAADA,MAAAA,CAArBZ,KAAoB,CAApBA;AACD;AAbH,KAAA,CAAA,CADF;AADY,GAAA,EAkBZ;AACA,GAnBF,QAmBE,CAnBY,CAAd;AAqBD","sourcesContent":["import React, { useContext, useEffect, useMemo } from 'react';\nimport { IProps } from '../../utils';\nimport { EditorContext } from '../../Context';\nimport { TextAreaCommandOrchestrator } from '../../commands';\nimport handleKeyDown from './handleKeyDown';\nimport shortcuts from './shortcuts';\nimport './index.less';\n\nexport interface TextAreaProps\n  extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'value' | 'onChange'>,\n    IProps {\n  onChange?: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n}\n\nexport default function Textarea(props: TextAreaProps) {\n  const { prefixCls, ...other } = props;\n  const { markdown, commands, tabSize, onChange, dispatch } = useContext(EditorContext);\n  const textRef = React.createRef<HTMLTextAreaElement>();\n  const executeRef = React.useRef<TextAreaCommandOrchestrator>();\n  useEffect(() => {\n    if (textRef.current && dispatch) {\n      const commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);\n      executeRef.current = commandOrchestrator;\n      dispatch({ textarea: textRef.current, commandOrchestrator });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return useMemo(\n    () => (\n      <textarea\n        {...other}\n        ref={textRef}\n        className={`${prefixCls}-text-input`}\n        value={markdown}\n        onScroll={props.onScroll}\n        onKeyDown={(e) => {\n          handleKeyDown(e, tabSize);\n          shortcuts(e, commands, executeRef.current);\n        }}\n        onChange={(e) => {\n          dispatch && dispatch({ markdown: e.target.value });\n          onChange && onChange(e.target.value);\n        }}\n      />\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [markdown],\n  );\n}\n"]},"metadata":{},"sourceType":"module"}