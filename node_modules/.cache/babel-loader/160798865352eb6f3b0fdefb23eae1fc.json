{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React, { useContext, useEffect, useMemo } from 'react';\nimport Prism from 'prismjs';\nimport { EditorContext } from '../../Context';\nimport \"./index.css\";\nexport default function Markdown(props) {\n  var prefixCls = props.prefixCls,\n      other = _objectWithoutProperties(props, [\"prefixCls\"]);\n\n  var _useContext = useContext(EditorContext),\n      _useContext$markdown = _useContext.markdown,\n      markdown = _useContext$markdown === void 0 ? '' : _useContext$markdown,\n      highlightEnable = _useContext.highlightEnable,\n      dispatch = _useContext.dispatch;\n\n  var preRef = /*#__PURE__*/React.createRef();\n  useEffect(function () {\n    if (preRef.current && dispatch) {\n      dispatch({\n        textareaPre: preRef.current\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n\n  var highlight = function highlight() {\n    if (!preRef.current) return;\n\n    if (highlightEnable && typeof markdown === 'string') {\n      var html = Prism.highlight(markdown, Prism.languages.markdown, 'markdown');\n      preRef.current.innerHTML = \"\".concat(html);\n    } else {\n      preRef.current.innerText = \"\".concat(markdown);\n    }\n  };\n\n  useEffect(function () {\n    highlight(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [markdown, preRef.current, highlightEnable]);\n  return useMemo(function () {\n    return /*#__PURE__*/React.createElement(\"pre\", _extends({}, other, {\n      ref: preRef,\n      className: \"\".concat(prefixCls, \"-text-pre wmde-markdown-color\")\n    }));\n  }, [other, preRef, prefixCls]);\n}","map":{"version":3,"sources":["../../../../src/components/TextArea/Markdown.tsx"],"names":["prefixCls","other","props","markdown","highlightEnable","dispatch","useContext","preRef","React","useEffect","textareaPre","current","highlight","html","Prism","useMemo"],"mappings":";;AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,SAAA,EAAA,OAAA,QAAA,OAAA;AAEA,OAAA,KAAA,MAAA,SAAA;AACA,SAAA,aAAA,QAAA,eAAA;AACA,OAAA,aAAA;AAIA,eAAe,SAAA,QAAA,CAAA,KAAA,EAAwC;AAAA,MAC7CA,SAD6C,GACrBE,KADqB,CAAA,SAAA;AAAA,MAC/BD,KAD+B,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,WAAA,CAAA,CAAA;;AAAA,MAAA,WAAA,GAEAK,UAAU,CAFV,aAEU,CAFV;AAAA,MAAA,oBAAA,GAAA,WAAA,CAAA,QAAA;AAAA,MAE7CH,QAF6C,GAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,oBAAA;AAAA,MAE9BC,eAF8B,GAAA,WAAA,CAAA,eAAA;AAAA,MAEbC,QAFa,GAAA,WAAA,CAAA,QAAA;;AAGrD,MAAME,MAAM,GAAA,aAAGC,KAAK,CAApB,SAAeA,EAAf;AACAC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIF,MAAM,CAANA,OAAAA,IAAJ,QAAA,EAAgC;AAC9BF,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,WAAW,EAAEH,MAAM,CAACI;AAAtB,OAAD,CAARN;AAFY,KAAA,CAId;;AAJO,GAAA,EAATI,EAAS,CAATA;;AAMA,MAAMG,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,QAAI,CAACL,MAAM,CAAX,OAAA,EAAqB;;AACrB,QAAIH,eAAe,IAAI,OAAA,QAAA,KAAvB,QAAA,EAAqD;AACnD,UAAMS,IAAI,GAAGC,KAAK,CAALA,SAAAA,CAAAA,QAAAA,EAAoCA,KAAK,CAALA,SAAAA,CAApCA,QAAAA,EAAb,UAAaA,CAAb;AACAP,MAAAA,MAAM,CAANA,OAAAA,CAAAA,SAAAA,GAAAA,GAAAA,MAAAA,CAAAA,IAAAA,CAAAA;AAFF,KAAA,MAGO;AACLA,MAAAA,MAAM,CAANA,OAAAA,CAAAA,SAAAA,GAAAA,GAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AACD;AAPH,GAAA;;AASAE,EAAAA,SAAS,CAAC,YAAM;AACdG,IAAAA,SADc,GAAA,CAEd;AAFO,GAAA,EAGN,CAAA,QAAA,EAAWL,MAAM,CAAjB,OAAA,EAHHE,eAGG,CAHM,CAATA;AAKA,SAAOM,OAAO,CAAC,YAAA;AAAA,WAAA,aAAM,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAgB,MAAA,GAAG,EAAnB,MAAA;AAA6B,MAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,+BAAA;AAAtC,KAAA,CAAA,CAAN;AAAD,GAAA,EAAgG,CAAA,KAAA,EAAA,MAAA,EAA9G,SAA8G,CAAhG,CAAd;AAKD","sourcesContent":["import React, { useContext, useEffect, useMemo } from 'react';\nimport { IProps } from '../../utils';\nimport Prism from 'prismjs';\nimport { EditorContext } from '../../Context';\nimport './index.less';\n\nexport interface MarkdownProps extends IProps, React.HTMLAttributes<HTMLPreElement> {}\n\nexport default function Markdown(props: MarkdownProps) {\n  const { prefixCls, ...other } = props;\n  const { markdown = '', highlightEnable, dispatch } = useContext(EditorContext);\n  const preRef = React.createRef<HTMLPreElement>();\n  useEffect(() => {\n    if (preRef.current && dispatch) {\n      dispatch({ textareaPre: preRef.current });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const highlight = () => {\n    if (!preRef.current) return;\n    if (highlightEnable && typeof markdown === 'string') {\n      const html = Prism.highlight(markdown as string, Prism.languages.markdown, 'markdown');\n      preRef.current.innerHTML = `${html}`;\n    } else {\n      preRef.current.innerText = `${markdown}`;\n    }\n  };\n  useEffect(() => {\n    highlight();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [markdown, preRef.current, highlightEnable]);\n\n  return useMemo(() => <pre {...other} ref={preRef} className={`${prefixCls}-text-pre wmde-markdown-color`} />, [\n    other,\n    preRef,\n    prefixCls,\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}