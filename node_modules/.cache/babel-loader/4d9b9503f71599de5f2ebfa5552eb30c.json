{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React, { useEffect, useMemo, useContext } from 'react';\nimport 'prismjs/components/prism-markdown.js';\nimport \"./index.css\";\nimport { EditorContext } from '../../Context';\nimport Markdown from './Markdown';\nimport Textarea from './Textarea';\nexport default function TextArea(props) {\n  var _ref = props || {},\n      prefixCls = _ref.prefixCls,\n      className = _ref.className,\n      onScroll = _ref.onScroll,\n      otherProps = _objectWithoutProperties(_ref, [\"prefixCls\", \"className\", \"onScroll\"]);\n\n  var _useContext = useContext(EditorContext),\n      scrollTop = _useContext.scrollTop,\n      dispatch = _useContext.dispatch;\n\n  var warp = /*#__PURE__*/React.createRef();\n  useEffect(function () {\n    var state = {};\n\n    if (warp.current) {\n      state.textareaWarp = warp.current || undefined;\n      warp.current.scrollTop = scrollTop || 0;\n    }\n\n    if (dispatch) {\n      dispatch(_objectSpread({}, state));\n    }\n  }, []);\n  return useMemo(function () {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: warp,\n      className: \"\".concat(prefixCls, \"-aree \").concat(className || ''),\n      onScroll: onScroll\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-text\")\n    }, /*#__PURE__*/React.createElement(Markdown, {\n      prefixCls: prefixCls\n    }), /*#__PURE__*/React.createElement(Textarea, _extends({\n      prefixCls: prefixCls\n    }, otherProps))));\n  }, []);\n}","map":{"version":3,"sources":["../../../../src/components/TextArea/index.tsx"],"names":["prefixCls","className","onScroll","otherProps","props","scrollTop","dispatch","useContext","warp","React","useEffect","state","useMemo"],"mappings":";;;AAAA,OAAA,KAAA,IAAA,SAAA,EAAA,OAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,sCAAA;AAEA,OAAA,aAAA;AACA,SAAA,aAAA,QAAA,eAAA;AAEA,OAAA,QAAA,MAAA,YAAA;AACA,OAAA,QAAA,MAAA,YAAA;AAcA,eAAe,SAAA,QAAA,CAAA,KAAA,EAAyC;AAAA,MAAA,IAAA,GACII,KAAK,IADT,EAAA;AAAA,MAC9CJ,SAD8C,GAAA,IAAA,CAAA,SAAA;AAAA,MACnCC,SADmC,GAAA,IAAA,CAAA,SAAA;AAAA,MACxBC,QADwB,GAAA,IAAA,CAAA,QAAA;AAAA,MACXC,UADW,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,WAAA,EAAA,UAAA,CAAA,CAAA;;AAAA,MAAA,WAAA,GAEtBI,UAAU,CAFY,aAEZ,CAFY;AAAA,MAE9CF,SAF8C,GAAA,WAAA,CAAA,SAAA;AAAA,MAEnCC,QAFmC,GAAA,WAAA,CAAA,QAAA;;AAGtD,MAAME,IAAI,GAAA,aAAGC,KAAK,CAAlB,SAAaA,EAAb;AACAC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMC,KAAmB,GAAzB,EAAA;;AACA,QAAIH,IAAI,CAAR,OAAA,EAAkB;AAChBG,MAAAA,KAAK,CAALA,YAAAA,GAAqBH,IAAI,CAAJA,OAAAA,IAArBG,SAAAA;AACAH,MAAAA,IAAI,CAAJA,OAAAA,CAAAA,SAAAA,GAAyBH,SAAS,IAAlCG,CAAAA;AACD;;AACD,QAAA,QAAA,EAAc;AACZF,MAAAA,QAAQ,CAAA,aAAA,CAAA,EAAA,EAARA,KAAQ,CAAA,CAARA;AACD;AARM,GAAA,EAATI,EAAS,CAATA;AAUA,SAAOE,OAAO,CACZ,YAAA;AAAA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,GAAG,EAAR,IAAA;AAAgB,MAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,QAAA,EAAA,MAAA,CAAuBX,SAAS,IAAzD,EAAyB,CAAzB;AAAmE,MAAA,QAAQ,EAAEC;AAA7E,KAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,OAAA;AAAd,KAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAU,MAAA,SAAS,EAAEF;AAArB,KAAA,CADF,EAAA,aAEE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA;AAAU,MAAA,SAAS,EAAEA;AAArB,KAAA,EAJN,UAIM,CAAA,CAFF,CADF,CADF;AADY,GAAA,EAAd,EAAc,CAAd;AAWD","sourcesContent":["import React, { useEffect, useMemo, useContext } from 'react';\nimport 'prismjs/components/prism-markdown.js';\nimport { IProps } from '../../utils';\nimport './index.less';\nimport { EditorContext, ContextStore } from '../../Context';\n\nimport Markdown from './Markdown';\nimport Textarea from './Textarea';\n\nexport interface ITextAreaProps\n  extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'value' | 'onChange' | 'onScroll'>,\n    IProps {\n  onScroll?: (e: React.UIEvent<HTMLDivElement>) => void;\n  value?: string;\n}\n\nexport type TextAreaRef = {\n  text?: HTMLTextAreaElement;\n  warp?: HTMLDivElement;\n};\n\nexport default function TextArea(props: ITextAreaProps) {\n  const { prefixCls, className, onScroll, ...otherProps } = props || {};\n  const { scrollTop, dispatch } = useContext(EditorContext);\n  const warp = React.createRef<HTMLDivElement>();\n  useEffect(() => {\n    const state: ContextStore = {};\n    if (warp.current) {\n      state.textareaWarp = warp.current || undefined;\n      warp.current.scrollTop = scrollTop || 0;\n    }\n    if (dispatch) {\n      dispatch({ ...state });\n    }\n  }, []);\n  return useMemo(\n    () => (\n      <div ref={warp} className={`${prefixCls}-aree ${className || ''}`} onScroll={onScroll}>\n        <div className={`${prefixCls}-text`}>\n          <Markdown prefixCls={prefixCls} />\n          <Textarea prefixCls={prefixCls} {...otherProps} />\n        </div>\n      </div>\n    ),\n    [],\n  );\n}\n"]},"metadata":{},"sourceType":"module"}