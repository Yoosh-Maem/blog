import _createForOfIteratorHelper from "@babel/runtime/helpers/createForOfIteratorHelper";
import _extends from "@babel/runtime/helpers/extends";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useEffect, useImperativeHandle } from 'react';
import ReactMarkdown from 'react-markdown';
import gfm from 'remark-gfm';
import rehypeRaw from 'rehype-raw';
import Prism from 'prismjs';
import 'prismjs/components/prism-markup';
import { loadLang } from './langs';
import "./styles/markdown.css";
import "./styles/markdowncolor.css";
export default /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _ref = props || {},
      className = _ref.className,
      source = _ref.source,
      style = _ref.style,
      onScroll = _ref.onScroll,
      onMouseOver = _ref.onMouseOver,
      _ref$warpperElement = _ref.warpperElement,
      warpperElement = _ref$warpperElement === void 0 ? {} : _ref$warpperElement,
      other = _objectWithoutProperties(_ref, ["className", "source", "style", "onScroll", "onMouseOver", "warpperElement"]);

  var mdp = /*#__PURE__*/React.createRef();
  var loadedLang = React.useRef(['markup']);
  useEffect(function () {
    highlight(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [source]);

  function highlight() {
    return _highlight.apply(this, arguments);
  }

  function _highlight() {
    _highlight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var codes, _iterator, _step, val, tag, lang;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (mdp.current) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return");

            case 2:
              codes = mdp.current.getElementsByTagName('code');
              _iterator = _createForOfIteratorHelper(codes);
              _context.prev = 4;

              _iterator.s();

            case 6:
              if ((_step = _iterator.n()).done) {
                _context.next = 24;
                break;
              }

              val = _step.value;
              tag = val.parentNode;

              if (!(tag && tag.tagName === 'PRE' && /^language-/.test(val.className.trim()))) {
                _context.next = 22;
                break;
              }

              lang = val.className.trim().replace(/^language-/, '');
              _context.prev = 11;

              if (loadedLang.current.includes(lang)) {
                _context.next = 16;
                break;
              }

              loadedLang.current.push(lang);
              _context.next = 16;
              return loadLang(lang);

            case 16:
              _context.next = 18;
              return Prism.highlightElement(val);

            case 18:
              _context.next = 22;
              break;

            case 20:
              _context.prev = 20;
              _context.t0 = _context["catch"](11);

            case 22:
              _context.next = 6;
              break;

            case 24:
              _context.next = 29;
              break;

            case 26:
              _context.prev = 26;
              _context.t1 = _context["catch"](4);

              _iterator.e(_context.t1);

            case 29:
              _context.prev = 29;

              _iterator.f();

              return _context.finish(29);

            case 32:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[4, 26, 29, 32], [11, 20]]);
    }));
    return _highlight.apply(this, arguments);
  }

  useImperativeHandle(ref, function () {
    return _objectSpread(_objectSpread({}, props), {}, {
      lang: loadedLang.current,
      mdp: mdp
    });
  }, [mdp, props]);
  var cls = "wmde-markdown wmde-markdown-color ".concat(className || '');
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: mdp,
    onScroll: onScroll,
    onMouseOver: onMouseOver
  }, warpperElement, {
    className: cls,
    style: style
  }), /*#__PURE__*/React.createElement(ReactMarkdown, _extends({}, other, {
    plugins: [gfm].concat(_toConsumableArray(other.plugins || [])),
    rehypePlugins: [rehypeRaw].concat(_toConsumableArray(other.rehypePlugins || []))
  }), source || ''));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmRleC50c3giXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwiUmVhY3RNYXJrZG93biIsImdmbSIsInJlaHlwZVJhdyIsIlByaXNtIiwibG9hZExhbmciLCJmb3J3YXJkUmVmIiwicHJvcHMiLCJyZWYiLCJjbGFzc05hbWUiLCJzb3VyY2UiLCJzdHlsZSIsIm9uU2Nyb2xsIiwib25Nb3VzZU92ZXIiLCJ3YXJwcGVyRWxlbWVudCIsIm90aGVyIiwibWRwIiwiY3JlYXRlUmVmIiwibG9hZGVkTGFuZyIsInVzZVJlZiIsImhpZ2hsaWdodCIsImN1cnJlbnQiLCJjb2RlcyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidmFsIiwidGFnIiwicGFyZW50Tm9kZSIsInRhZ05hbWUiLCJ0ZXN0IiwidHJpbSIsImxhbmciLCJyZXBsYWNlIiwiaW5jbHVkZXMiLCJwdXNoIiwiaGlnaGxpZ2h0RWxlbWVudCIsImNscyIsInBsdWdpbnMiLCJyZWh5cGVQbHVnaW5zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsU0FBaEIsRUFBMkJDLG1CQUEzQixRQUFzRCxPQUF0RDtBQUNBLE9BQU9DLGFBQVAsTUFBMEIsZ0JBQTFCO0FBQ0EsT0FBT0MsR0FBUCxNQUFnQixZQUFoQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxLQUFQLE1BQWtCLFNBQWxCO0FBQ0EsT0FBTyxpQ0FBUDtBQUNBLFNBQVNDLFFBQVQsUUFBeUIsU0FBekI7QUFDQTtBQUNBO0FBZ0JBLDRCQUFlUCxLQUFLLENBQUNRLFVBQU4sQ0FBMkQsVUFBQ0MsS0FBRCxFQUFRQyxHQUFSLEVBQWdCO0FBQUEsYUFDSUQsS0FBSyxJQUFJLEVBRGI7QUFBQSxNQUNoRkUsU0FEZ0YsUUFDaEZBLFNBRGdGO0FBQUEsTUFDckVDLE1BRHFFLFFBQ3JFQSxNQURxRTtBQUFBLE1BQzdEQyxLQUQ2RCxRQUM3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S0FBSyxDQUFDc0IsYUFBTixJQUF1QixFQUF6QztBQUhmLE1BS0czQixNQUFNLElBQUksRUFMYixDQURGLENBREY7QUFXRCxDQXpDYyxDQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlSW1wZXJhdGl2ZUhhbmRsZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdE1hcmtkb3duIGZyb20gJ3JlYWN0LW1hcmtkb3duJztcbmltcG9ydCBnZm0gZnJvbSAncmVtYXJrLWdmbSc7XG5pbXBvcnQgcmVoeXBlUmF3IGZyb20gJ3JlaHlwZS1yYXcnO1xuaW1wb3J0IFByaXNtIGZyb20gJ3ByaXNtanMnO1xuaW1wb3J0ICdwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tbWFya3VwJztcbmltcG9ydCB7IGxvYWRMYW5nIH0gZnJvbSAnLi9sYW5ncyc7XG5pbXBvcnQgJy4vc3R5bGVzL21hcmtkb3duLmxlc3MnO1xuaW1wb3J0ICcuL3N0eWxlcy9tYXJrZG93bmNvbG9yLmxlc3MnO1xuXG5leHBvcnQgdHlwZSBNYXJrZG93blByZXZpZXdQcm9wcyA9IHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBzb3VyY2U/OiBzdHJpbmc7XG4gIHN0eWxlPzogUmVhY3QuQ1NTUHJvcGVydGllcztcbiAgd2FycHBlckVsZW1lbnQ/OiBSZWFjdC5EZXRhaWxlZEhUTUxQcm9wczxSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4sIEhUTUxEaXZFbGVtZW50PjtcbiAgb25TY3JvbGw/OiAoZTogUmVhY3QuVUlFdmVudDxIVE1MRGl2RWxlbWVudD4pID0+IHZvaWQ7XG4gIG9uTW91c2VPdmVyPzogKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSA9PiB2b2lkO1xufSAmIE9taXQ8UmVhY3RNYXJrZG93bi5SZWFjdE1hcmtkb3duT3B0aW9ucywgJ2NoaWxkcmVuJz47XG5cbmV4cG9ydCB0eXBlIE1hcmtkb3duUHJldmlld1JlZiA9IHtcbiAgbWRwOiBSZWFjdC5SZWZPYmplY3Q8SFRNTERpdkVsZW1lbnQ+O1xuICBsYW5nOiBzdHJpbmdbXSxcbn0gJiBNYXJrZG93blByZXZpZXdQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QuZm9yd2FyZFJlZjxNYXJrZG93blByZXZpZXdSZWYsIE1hcmtkb3duUHJldmlld1Byb3BzPigocHJvcHMsIHJlZikgPT4ge1xuICBjb25zdCB7IGNsYXNzTmFtZSwgc291cmNlLCBzdHlsZSwgb25TY3JvbGwsIG9uTW91c2VPdmVyLCB3YXJwcGVyRWxlbWVudCA9IHt9LCAuLi5vdGhlciAgfSA9IHByb3BzIHx8IHt9O1xuICBjb25zdCBtZHAgPSBSZWFjdC5jcmVhdGVSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XG4gIGNvbnN0IGxvYWRlZExhbmcgPSBSZWFjdC51c2VSZWY8c3RyaW5nW10+KFsnbWFya3VwJ10pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGhpZ2hsaWdodCgpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW3NvdXJjZV0pO1xuXG4gIGFzeW5jIGZ1bmN0aW9uIGhpZ2hsaWdodCgpIHtcbiAgICBpZiAoIW1kcC5jdXJyZW50KSByZXR1cm47XG4gICAgY29uc3QgY29kZXMgPSBtZHAuY3VycmVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnY29kZScpIGFzIHVua25vd24gYXMgSFRNTEVsZW1lbnRbXTtcbiAgICBmb3IgKGNvbnN0IHZhbCBvZiBjb2Rlcykge1xuICAgICAgY29uc3QgdGFnID0gdmFsLnBhcmVudE5vZGUgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICBpZiAodGFnICYmIHRhZy50YWdOYW1lID09PSAnUFJFJyAmJiAvXmxhbmd1YWdlLS8udGVzdCh2YWwuY2xhc3NOYW1lLnRyaW0oKSkpIHtcbiAgICAgICAgY29uc3QgbGFuZyA9IHZhbC5jbGFzc05hbWUudHJpbSgpLnJlcGxhY2UoL15sYW5ndWFnZS0vLCAnJyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFsb2FkZWRMYW5nLmN1cnJlbnQuaW5jbHVkZXMobGFuZyBhcyBuZXZlcikpIHtcbiAgICAgICAgICAgIGxvYWRlZExhbmcuY3VycmVudC5wdXNoKGxhbmcpO1xuICAgICAgICAgICAgYXdhaXQgbG9hZExhbmcobGFuZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGF3YWl0IFByaXNtLmhpZ2hsaWdodEVsZW1lbnQodmFsKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCAoKSA9PiAoeyAuLi5wcm9wcywgbGFuZzogbG9hZGVkTGFuZy5jdXJyZW50LCBtZHAgfSksIFttZHAsIHByb3BzXSk7XG5cbiAgY29uc3QgY2xzID0gYHdtZGUtbWFya2Rvd24gd21kZS1tYXJrZG93bi1jb2xvciAke2NsYXNzTmFtZSB8fCAnJ31gO1xuICByZXR1cm4gKFxuICAgIDxkaXYgcmVmPXttZHB9IG9uU2Nyb2xsPXtvblNjcm9sbH0gb25Nb3VzZU92ZXI9e29uTW91c2VPdmVyfSB7Li4ud2FycHBlckVsZW1lbnR9IGNsYXNzTmFtZT17Y2xzfSBzdHlsZT17c3R5bGV9PlxuICAgICAgPFJlYWN0TWFya2Rvd25cbiAgICAgICAgey4uLm90aGVyfVxuICAgICAgICBwbHVnaW5zPXtbZ2ZtLCAgLi4uKG90aGVyLnBsdWdpbnMgfHwgW10pXX1cbiAgICAgICAgcmVoeXBlUGx1Z2lucz17W3JlaHlwZVJhdywgLi4uKG90aGVyLnJlaHlwZVBsdWdpbnMgfHwgW10pXX1cbiAgICAgID5cbiAgICAgICAge3NvdXJjZSB8fCAnJ31cbiAgICAgIDwvUmVhY3RNYXJrZG93bj5cbiAgICA8L2Rpdj5cbiAgKTtcbn0pO1xuIl19