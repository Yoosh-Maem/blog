import * as React from 'react';
import { selectWord } from '../utils/markdownUtils';
export var bold = {
  name: 'bold',
  keyCommand: 'bold',
  shortcuts: 'ctrlcmd+b',
  buttonProps: {
    'aria-label': 'Add bold text',
    title: 'Add bold text'
  },
  icon: /*#__PURE__*/React.createElement("svg", {
    role: "img",
    width: "12",
    height: "12",
    viewBox: "0 0 384 512"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "currentColor",
    d: "M304.793 243.891c33.639-18.537 53.657-54.16 53.657-95.693 0-48.236-26.25-87.626-68.626-104.179C265.138 34.01 240.849 32 209.661 32H24c-8.837 0-16 7.163-16 16v33.049c0 8.837 7.163 16 16 16h33.113v318.53H24c-8.837 0-16 7.163-16 16V464c0 8.837 7.163 16 16 16h195.69c24.203 0 44.834-1.289 66.866-7.584C337.52 457.193 376 410.647 376 350.014c0-52.168-26.573-91.684-71.207-106.123zM142.217 100.809h67.444c16.294 0 27.536 2.019 37.525 6.717 15.828 8.479 24.906 26.502 24.906 49.446 0 35.029-20.32 56.79-53.029 56.79h-76.846V100.809zm112.642 305.475c-10.14 4.056-22.677 4.907-31.409 4.907h-81.233V281.943h84.367c39.645 0 63.057 25.38 63.057 63.057.001 28.425-13.66 52.483-34.782 61.284z"
  })),
  execute: function execute(state, api) {
    // Adjust the selection to encompass the whole word if the caret is inside one
    var newSelectionRange = selectWord({
      text: state.text,
      selection: state.selection
    });
    var state1 = api.setSelectionRange(newSelectionRange); // Replaces the current selection with the bold mark up

    var state2 = api.replaceSelection("**".concat(state1.selectedText, "**")); // Adjust the selection to not contain the **

    api.setSelectionRange({
      start: state2.selection.end - 2 - state1.selectedText.length,
      end: state2.selection.end - 2
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9ib2xkLnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInNlbGVjdFdvcmQiLCJib2xkIiwibmFtZSIsImtleUNvbW1hbmQiLCJzaG9ydGN1dHMiLCJidXR0b25Qcm9wcyIsInRpdGxlIiwiaWNvbiIsImV4ZWN1dGUiLCJzdGF0ZSIsImFwaSIsIm5ld1NlbGVjdGlvblJhbmdlIiwidGV4dCIsInNlbGVjdGlvbiIsInN0YXRlMSIsInNldFNlbGVjdGlvblJhbmdlIiwic3RhdGUyIiwicmVwbGFjZVNlbGVjdGlvbiIsInNlbGVjdGVkVGV4dCIsInN0YXJ0IiwiZW5kIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUtBLEtBQVosTUFBdUIsT0FBdkI7QUFFQSxTQUFTQyxVQUFULFFBQTJCLHdCQUEzQjtBQUVBLE9BQU8sSUFBTUMsSUFBYyxHQUFHO0FBQzVCQyxFQUFBQSxJQUFJLEVBQUUsTUFEc0I7QUFFNUJDLEVBQUFBLFVBQVUsRUFBRSxNQUZnQjtBQUc1QkMsRUFBQUEsU0FBUyxFQUFFLFdBSGlCO0FBSTVCQyxFQUFBQSxXQUFXLEVBQUU7QUFBRSxrQkFBYyxlQUFoQjtBQUFpQ0MsSUFBQUEsS0FBSyxFQUFFO0FBQXhDLEdBSmU7QUFLNUJDLEVBQUFBLElBQUksZUFDRjtBQUFLLElBQUEsSUFBSSxFQUFDLEtBQVY7QUFBZ0IsSUFBQSxLQUFLLEVBQUMsSUFBdEI7QUFBMkIsSUFBQSxNQUFNLEVBQUMsSUFBbEM7QUFBdUMsSUFBQSxPQUFPLEVBQUM7QUFBL0Msa0JBQ0U7QUFDRSxJQUFBLElBQUksRUFBQyxjQURQO0FBRUUsSUFBQSxDQUFDLEVBQUM7QUFGSixJQURGLENBTjBCO0FBYTVCQyxFQUFBQSxPQUFPLEVBQUUsaUJBQUNDLEtBQUQsRUFBbUJDLEdBQW5CLEVBQW9DO0FBQzNDO0FBQ0EsUUFBTUMsaUJBQWlCLEdBQUdYLFVBQVUsQ0FBQztBQUFFWSxNQUFBQSxJQUFJLEVBQUVILEtBQUssQ0FBQ0csSUFBZDtBQUFvQkMsTUFBQUEsU0FBUyxFQUFFSixLQUFLLENBQUNJO0FBQXJDLEtBQUQsQ0FBcEM7QUFDQSxRQUFNQyxNQUFNLEdBQUdKLEdBQUcsQ0FBQ0ssaUJBQUosQ0FBc0JKLGlCQUF0QixDQUFmLENBSDJDLENBSTNDOztBQUNBLFFBQU1LLE1BQU0sR0FBR04sR0FBRyxDQUFDTyxnQkFBSixhQUEwQkgsTUFBTSxDQUFDSSxZQUFqQyxRQUFmLENBTDJDLENBTTNDOztBQUNBUixJQUFBQSxHQUFHLENBQUNLLGlCQUFKLENBQXNCO0FBQ3BCSSxNQUFBQSxLQUFLLEVBQUVILE1BQU0sQ0FBQ0gsU0FBUCxDQUFpQk8sR0FBakIsR0FBdUIsQ0FBdkIsR0FBMkJOLE1BQU0sQ0FBQ0ksWUFBUCxDQUFvQkcsTUFEbEM7QUFFcEJELE1BQUFBLEdBQUcsRUFBRUosTUFBTSxDQUFDSCxTQUFQLENBQWlCTyxHQUFqQixHQUF1QjtBQUZSLEtBQXRCO0FBSUQ7QUF4QjJCLENBQXZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSUNvbW1hbmQsIFRleHRTdGF0ZSwgVGV4dEFwaSB9IGZyb20gJy4vJztcbmltcG9ydCB7IHNlbGVjdFdvcmQgfSBmcm9tICcuLi91dGlscy9tYXJrZG93blV0aWxzJztcblxuZXhwb3J0IGNvbnN0IGJvbGQ6IElDb21tYW5kID0ge1xuICBuYW1lOiAnYm9sZCcsXG4gIGtleUNvbW1hbmQ6ICdib2xkJyxcbiAgc2hvcnRjdXRzOiAnY3RybGNtZCtiJyxcbiAgYnV0dG9uUHJvcHM6IHsgJ2FyaWEtbGFiZWwnOiAnQWRkIGJvbGQgdGV4dCcsIHRpdGxlOiAnQWRkIGJvbGQgdGV4dCcgfSxcbiAgaWNvbjogKFxuICAgIDxzdmcgcm9sZT1cImltZ1wiIHdpZHRoPVwiMTJcIiBoZWlnaHQ9XCIxMlwiIHZpZXdCb3g9XCIwIDAgMzg0IDUxMlwiPlxuICAgICAgPHBhdGhcbiAgICAgICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgICAgIGQ9XCJNMzA0Ljc5MyAyNDMuODkxYzMzLjYzOS0xOC41MzcgNTMuNjU3LTU0LjE2IDUzLjY1Ny05NS42OTMgMC00OC4yMzYtMjYuMjUtODcuNjI2LTY4LjYyNi0xMDQuMTc5QzI2NS4xMzggMzQuMDEgMjQwLjg0OSAzMiAyMDkuNjYxIDMySDI0Yy04LjgzNyAwLTE2IDcuMTYzLTE2IDE2djMzLjA0OWMwIDguODM3IDcuMTYzIDE2IDE2IDE2aDMzLjExM3YzMTguNTNIMjRjLTguODM3IDAtMTYgNy4xNjMtMTYgMTZWNDY0YzAgOC44MzcgNy4xNjMgMTYgMTYgMTZoMTk1LjY5YzI0LjIwMyAwIDQ0LjgzNC0xLjI4OSA2Ni44NjYtNy41ODRDMzM3LjUyIDQ1Ny4xOTMgMzc2IDQxMC42NDcgMzc2IDM1MC4wMTRjMC01Mi4xNjgtMjYuNTczLTkxLjY4NC03MS4yMDctMTA2LjEyM3pNMTQyLjIxNyAxMDAuODA5aDY3LjQ0NGMxNi4yOTQgMCAyNy41MzYgMi4wMTkgMzcuNTI1IDYuNzE3IDE1LjgyOCA4LjQ3OSAyNC45MDYgMjYuNTAyIDI0LjkwNiA0OS40NDYgMCAzNS4wMjktMjAuMzIgNTYuNzktNTMuMDI5IDU2Ljc5aC03Ni44NDZWMTAwLjgwOXptMTEyLjY0MiAzMDUuNDc1Yy0xMC4xNCA0LjA1Ni0yMi42NzcgNC45MDctMzEuNDA5IDQuOTA3aC04MS4yMzNWMjgxLjk0M2g4NC4zNjdjMzkuNjQ1IDAgNjMuMDU3IDI1LjM4IDYzLjA1NyA2My4wNTcuMDAxIDI4LjQyNS0xMy42NiA1Mi40ODMtMzQuNzgyIDYxLjI4NHpcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKSxcbiAgZXhlY3V0ZTogKHN0YXRlOiBUZXh0U3RhdGUsIGFwaTogVGV4dEFwaSkgPT4ge1xuICAgIC8vIEFkanVzdCB0aGUgc2VsZWN0aW9uIHRvIGVuY29tcGFzcyB0aGUgd2hvbGUgd29yZCBpZiB0aGUgY2FyZXQgaXMgaW5zaWRlIG9uZVxuICAgIGNvbnN0IG5ld1NlbGVjdGlvblJhbmdlID0gc2VsZWN0V29yZCh7IHRleHQ6IHN0YXRlLnRleHQsIHNlbGVjdGlvbjogc3RhdGUuc2VsZWN0aW9uIH0pO1xuICAgIGNvbnN0IHN0YXRlMSA9IGFwaS5zZXRTZWxlY3Rpb25SYW5nZShuZXdTZWxlY3Rpb25SYW5nZSk7XG4gICAgLy8gUmVwbGFjZXMgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIHdpdGggdGhlIGJvbGQgbWFyayB1cFxuICAgIGNvbnN0IHN0YXRlMiA9IGFwaS5yZXBsYWNlU2VsZWN0aW9uKGAqKiR7c3RhdGUxLnNlbGVjdGVkVGV4dH0qKmApO1xuICAgIC8vIEFkanVzdCB0aGUgc2VsZWN0aW9uIHRvIG5vdCBjb250YWluIHRoZSAqKlxuICAgIGFwaS5zZXRTZWxlY3Rpb25SYW5nZSh7XG4gICAgICBzdGFydDogc3RhdGUyLnNlbGVjdGlvbi5lbmQgLSAyIC0gc3RhdGUxLnNlbGVjdGVkVGV4dC5sZW5ndGgsXG4gICAgICBlbmQ6IHN0YXRlMi5zZWxlY3Rpb24uZW5kIC0gMixcbiAgICB9KTtcbiAgfSxcbn07XG4iXX0=