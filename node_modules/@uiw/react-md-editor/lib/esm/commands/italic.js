import * as React from 'react';
import { selectWord } from '../utils/markdownUtils';
export var italic = {
  name: 'italic',
  keyCommand: 'italic',
  shortcuts: 'ctrlcmd+i',
  buttonProps: {
    'aria-label': 'Add italic text',
    title: 'Add italic text'
  },
  icon: /*#__PURE__*/React.createElement("svg", {
    "data-name": "italic",
    width: "12",
    height: "12",
    role: "img",
    viewBox: "0 0 320 512"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "currentColor",
    d: "M204.758 416h-33.849l62.092-320h40.725a16 16 0 0 0 15.704-12.937l6.242-32C297.599 41.184 290.034 32 279.968 32H120.235a16 16 0 0 0-15.704 12.937l-6.242 32C96.362 86.816 103.927 96 113.993 96h33.846l-62.09 320H46.278a16 16 0 0 0-15.704 12.935l-6.245 32C22.402 470.815 29.967 480 40.034 480h158.479a16 16 0 0 0 15.704-12.935l6.245-32c1.927-9.88-5.638-19.065-15.704-19.065z"
  })),
  execute: function execute(state, api) {
    // Adjust the selection to encompass the whole word if the caret is inside one
    var newSelectionRange = selectWord({
      text: state.text,
      selection: state.selection
    });
    var state1 = api.setSelectionRange(newSelectionRange); // Replaces the current selection with the italic mark up

    var state2 = api.replaceSelection("*".concat(state1.selectedText, "*")); // Adjust the selection to not contain the *

    api.setSelectionRange({
      start: state2.selection.end - 1 - state1.selectedText.length,
      end: state2.selection.end - 1
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9pdGFsaWMudHN4Il0sIm5hbWVzIjpbIlJlYWN0Iiwic2VsZWN0V29yZCIsIml0YWxpYyIsIm5hbWUiLCJrZXlDb21tYW5kIiwic2hvcnRjdXRzIiwiYnV0dG9uUHJvcHMiLCJ0aXRsZSIsImljb24iLCJleGVjdXRlIiwic3RhdGUiLCJhcGkiLCJuZXdTZWxlY3Rpb25SYW5nZSIsInRleHQiLCJzZWxlY3Rpb24iLCJzdGF0ZTEiLCJzZXRTZWxlY3Rpb25SYW5nZSIsInN0YXRlMiIsInJlcGxhY2VTZWxlY3Rpb24iLCJzZWxlY3RlZFRleHQiLCJzdGFydCIsImVuZCIsImxlbmd0aCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLQSxLQUFaLE1BQXVCLE9BQXZCO0FBRUEsU0FBU0MsVUFBVCxRQUEyQix3QkFBM0I7QUFFQSxPQUFPLElBQU1DLE1BQWdCLEdBQUc7QUFDOUJDLEVBQUFBLElBQUksRUFBRSxRQUR3QjtBQUU5QkMsRUFBQUEsVUFBVSxFQUFFLFFBRmtCO0FBRzlCQyxFQUFBQSxTQUFTLEVBQUUsV0FIbUI7QUFJOUJDLEVBQUFBLFdBQVcsRUFBRTtBQUFFLGtCQUFjLGlCQUFoQjtBQUFtQ0MsSUFBQUEsS0FBSyxFQUFFO0FBQTFDLEdBSmlCO0FBSzlCQyxFQUFBQSxJQUFJLGVBQ0Y7QUFBSyxpQkFBVSxRQUFmO0FBQXdCLElBQUEsS0FBSyxFQUFDLElBQTlCO0FBQW1DLElBQUEsTUFBTSxFQUFDLElBQTFDO0FBQStDLElBQUEsSUFBSSxFQUFDLEtBQXBEO0FBQTBELElBQUEsT0FBTyxFQUFDO0FBQWxFLGtCQUNFO0FBQ0UsSUFBQSxJQUFJLEVBQUMsY0FEUDtBQUVFLElBQUEsQ0FBQyxFQUFDO0FBRkosSUFERixDQU40QjtBQWE5QkMsRUFBQUEsT0FBTyxFQUFFLGlCQUFDQyxLQUFELEVBQW1CQyxHQUFuQixFQUFvQztBQUMzQztBQUNBLFFBQU1DLGlCQUFpQixHQUFHWCxVQUFVLENBQUM7QUFBRVksTUFBQUEsSUFBSSxFQUFFSCxLQUFLLENBQUNHLElBQWQ7QUFBb0JDLE1BQUFBLFNBQVMsRUFBRUosS0FBSyxDQUFDSTtBQUFyQyxLQUFELENBQXBDO0FBQ0EsUUFBTUMsTUFBTSxHQUFHSixHQUFHLENBQUNLLGlCQUFKLENBQXNCSixpQkFBdEIsQ0FBZixDQUgyQyxDQUkzQzs7QUFDQSxRQUFNSyxNQUFNLEdBQUdOLEdBQUcsQ0FBQ08sZ0JBQUosWUFBeUJILE1BQU0sQ0FBQ0ksWUFBaEMsT0FBZixDQUwyQyxDQU0zQzs7QUFDQVIsSUFBQUEsR0FBRyxDQUFDSyxpQkFBSixDQUFzQjtBQUNwQkksTUFBQUEsS0FBSyxFQUFFSCxNQUFNLENBQUNILFNBQVAsQ0FBaUJPLEdBQWpCLEdBQXVCLENBQXZCLEdBQTJCTixNQUFNLENBQUNJLFlBQVAsQ0FBb0JHLE1BRGxDO0FBRXBCRCxNQUFBQSxHQUFHLEVBQUVKLE1BQU0sQ0FBQ0gsU0FBUCxDQUFpQk8sR0FBakIsR0FBdUI7QUFGUixLQUF0QjtBQUlEO0FBeEI2QixDQUF6QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IElDb21tYW5kLCBUZXh0U3RhdGUsIFRleHRBcGkgfSBmcm9tICcuLyc7XG5pbXBvcnQgeyBzZWxlY3RXb3JkIH0gZnJvbSAnLi4vdXRpbHMvbWFya2Rvd25VdGlscyc7XG5cbmV4cG9ydCBjb25zdCBpdGFsaWM6IElDb21tYW5kID0ge1xuICBuYW1lOiAnaXRhbGljJyxcbiAga2V5Q29tbWFuZDogJ2l0YWxpYycsXG4gIHNob3J0Y3V0czogJ2N0cmxjbWQraScsXG4gIGJ1dHRvblByb3BzOiB7ICdhcmlhLWxhYmVsJzogJ0FkZCBpdGFsaWMgdGV4dCcsIHRpdGxlOiAnQWRkIGl0YWxpYyB0ZXh0JyB9LFxuICBpY29uOiAoXG4gICAgPHN2ZyBkYXRhLW5hbWU9XCJpdGFsaWNcIiB3aWR0aD1cIjEyXCIgaGVpZ2h0PVwiMTJcIiByb2xlPVwiaW1nXCIgdmlld0JveD1cIjAgMCAzMjAgNTEyXCI+XG4gICAgICA8cGF0aFxuICAgICAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICAgICAgZD1cIk0yMDQuNzU4IDQxNmgtMzMuODQ5bDYyLjA5Mi0zMjBoNDAuNzI1YTE2IDE2IDAgMCAwIDE1LjcwNC0xMi45MzdsNi4yNDItMzJDMjk3LjU5OSA0MS4xODQgMjkwLjAzNCAzMiAyNzkuOTY4IDMySDEyMC4yMzVhMTYgMTYgMCAwIDAtMTUuNzA0IDEyLjkzN2wtNi4yNDIgMzJDOTYuMzYyIDg2LjgxNiAxMDMuOTI3IDk2IDExMy45OTMgOTZoMzMuODQ2bC02Mi4wOSAzMjBINDYuMjc4YTE2IDE2IDAgMCAwLTE1LjcwNCAxMi45MzVsLTYuMjQ1IDMyQzIyLjQwMiA0NzAuODE1IDI5Ljk2NyA0ODAgNDAuMDM0IDQ4MGgxNTguNDc5YTE2IDE2IDAgMCAwIDE1LjcwNC0xMi45MzVsNi4yNDUtMzJjMS45MjctOS44OC01LjYzOC0xOS4wNjUtMTUuNzA0LTE5LjA2NXpcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKSxcbiAgZXhlY3V0ZTogKHN0YXRlOiBUZXh0U3RhdGUsIGFwaTogVGV4dEFwaSkgPT4ge1xuICAgIC8vIEFkanVzdCB0aGUgc2VsZWN0aW9uIHRvIGVuY29tcGFzcyB0aGUgd2hvbGUgd29yZCBpZiB0aGUgY2FyZXQgaXMgaW5zaWRlIG9uZVxuICAgIGNvbnN0IG5ld1NlbGVjdGlvblJhbmdlID0gc2VsZWN0V29yZCh7IHRleHQ6IHN0YXRlLnRleHQsIHNlbGVjdGlvbjogc3RhdGUuc2VsZWN0aW9uIH0pO1xuICAgIGNvbnN0IHN0YXRlMSA9IGFwaS5zZXRTZWxlY3Rpb25SYW5nZShuZXdTZWxlY3Rpb25SYW5nZSk7XG4gICAgLy8gUmVwbGFjZXMgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIHdpdGggdGhlIGl0YWxpYyBtYXJrIHVwXG4gICAgY29uc3Qgc3RhdGUyID0gYXBpLnJlcGxhY2VTZWxlY3Rpb24oYCoke3N0YXRlMS5zZWxlY3RlZFRleHR9KmApO1xuICAgIC8vIEFkanVzdCB0aGUgc2VsZWN0aW9uIHRvIG5vdCBjb250YWluIHRoZSAqXG4gICAgYXBpLnNldFNlbGVjdGlvblJhbmdlKHtcbiAgICAgIHN0YXJ0OiBzdGF0ZTIuc2VsZWN0aW9uLmVuZCAtIDEgLSBzdGF0ZTEuc2VsZWN0ZWRUZXh0Lmxlbmd0aCxcbiAgICAgIGVuZDogc3RhdGUyLnNlbGVjdGlvbi5lbmQgLSAxLFxuICAgIH0pO1xuICB9LFxufTtcbiJdfQ==