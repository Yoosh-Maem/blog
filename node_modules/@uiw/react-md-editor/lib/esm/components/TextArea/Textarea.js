import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React, { useContext, useEffect, useMemo } from 'react';
import { EditorContext } from '../../Context';
import { TextAreaCommandOrchestrator } from '../../commands';
import handleKeyDown from './handleKeyDown';
import shortcuts from './shortcuts';
import "./index.css";
export default function Textarea(props) {
  var prefixCls = props.prefixCls,
      other = _objectWithoutProperties(props, ["prefixCls"]);

  var _useContext = useContext(EditorContext),
      markdown = _useContext.markdown,
      commands = _useContext.commands,
      tabSize = _useContext.tabSize,
      _onChange = _useContext.onChange,
      dispatch = _useContext.dispatch;

  var textRef = /*#__PURE__*/React.createRef();
  var executeRef = React.useRef();
  useEffect(function () {
    if (textRef.current && dispatch) {
      var commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);
      executeRef.current = commandOrchestrator;
      dispatch({
        textarea: textRef.current,
        commandOrchestrator: commandOrchestrator
      });
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);
  return useMemo(function () {
    return /*#__PURE__*/React.createElement("textarea", _extends({}, other, {
      ref: textRef,
      className: "".concat(prefixCls, "-text-input"),
      value: markdown,
      onScroll: props.onScroll,
      onKeyDown: function onKeyDown(e) {
        handleKeyDown(e, tabSize);
        shortcuts(e, commands, executeRef.current);
      },
      onChange: function onChange(e) {
        dispatch && dispatch({
          markdown: e.target.value
        });
        _onChange && _onChange(e.target.value);
      }
    }));
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [markdown]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL1RleHRhcmVhLnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VNZW1vIiwiRWRpdG9yQ29udGV4dCIsIlRleHRBcmVhQ29tbWFuZE9yY2hlc3RyYXRvciIsImhhbmRsZUtleURvd24iLCJzaG9ydGN1dHMiLCJUZXh0YXJlYSIsInByb3BzIiwicHJlZml4Q2xzIiwib3RoZXIiLCJtYXJrZG93biIsImNvbW1hbmRzIiwidGFiU2l6ZSIsIm9uQ2hhbmdlIiwiZGlzcGF0Y2giLCJ0ZXh0UmVmIiwiY3JlYXRlUmVmIiwiZXhlY3V0ZVJlZiIsInVzZVJlZiIsImN1cnJlbnQiLCJjb21tYW5kT3JjaGVzdHJhdG9yIiwidGV4dGFyZWEiLCJvblNjcm9sbCIsImUiLCJ0YXJnZXQiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxVQUFoQixFQUE0QkMsU0FBNUIsRUFBdUNDLE9BQXZDLFFBQXNELE9BQXREO0FBRUEsU0FBU0MsYUFBVCxRQUE4QixlQUE5QjtBQUNBLFNBQVNDLDJCQUFULFFBQTRDLGdCQUE1QztBQUNBLE9BQU9DLGFBQVAsTUFBMEIsaUJBQTFCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixhQUF0QjtBQUNBO0FBUUEsZUFBZSxTQUFTQyxRQUFULENBQWtCQyxLQUFsQixFQUF3QztBQUFBLE1BQzdDQyxTQUQ2QyxHQUNyQkQsS0FEcUIsQ0FDN0NDLFNBRDZDO0FBQUEsTUFDL0JDLEtBRCtCLDRCQUNyQkYsS0FEcUI7O0FBQUEsb0JBRU9SLFVBQVUsQ0FBQ0csYUFBRCxDQUZqQjtBQUFBLE1BRTdDUSxRQUY2QyxlQUU3Q0EsUUFGNkM7QUFBQSxNQUVuQ0MsUUFGbUMsZUFFbkNBLFFBRm1DO0FBQUEsTUFFekJDLE9BRnlCLGVBRXpCQSxPQUZ5QjtBQUFBLE1BRWhCQyxTQUZnQixlQUVoQkEsUUFGZ0I7QUFBQSxNQUVOQyxRQUZNLGVBRU5BLFFBRk07O0FBR3JELE1BQU1DLE9BQU8sZ0JBQUdqQixLQUFLLENBQUNrQixTQUFOLEVBQWhCO0FBQ0EsTUFBTUMsVUFBVSxHQUFHbkIsS0FBSyxDQUFDb0IsTUFBTixFQUFuQjtBQUNBbEIsRUFBQUEsU0FBUyxDQUFDLFlBQU07QUFDZCxRQUFJZSxPQUFPLENBQUNJLE9BQVIsSUFBbUJMLFFBQXZCLEVBQWlDO0FBQy9CLFVBQU1NLG1CQUFtQixHQUFHLElBQUlqQiwyQkFBSixDQUFnQ1ksT0FBTyxDQUFDSSxPQUF4QyxDQUE1QjtBQUNBRixNQUFBQSxVQUFVLENBQUNFLE9BQVgsR0FBcUJDLG1CQUFyQjtBQUNBTixNQUFBQSxRQUFRLENBQUM7QUFBRU8sUUFBQUEsUUFBUSxFQUFFTixPQUFPLENBQUNJLE9BQXBCO0FBQTZCQyxRQUFBQSxtQkFBbUIsRUFBbkJBO0FBQTdCLE9BQUQsQ0FBUjtBQUNELEtBTGEsQ0FNZDs7QUFDRCxHQVBRLEVBT04sRUFQTSxDQUFUO0FBUUEsU0FBT25CLE9BQU8sQ0FDWjtBQUFBLHdCQUNFLDZDQUNNUSxLQUROO0FBRUUsTUFBQSxHQUFHLEVBQUVNLE9BRlA7QUFHRSxNQUFBLFNBQVMsWUFBS1AsU0FBTCxnQkFIWDtBQUlFLE1BQUEsS0FBSyxFQUFFRSxRQUpUO0FBS0UsTUFBQSxRQUFRLEVBQUVILEtBQUssQ0FBQ2UsUUFMbEI7QUFNRSxNQUFBLFNBQVMsRUFBRSxtQkFBQ0MsQ0FBRCxFQUFPO0FBQ2hCbkIsUUFBQUEsYUFBYSxDQUFDbUIsQ0FBRCxFQUFJWCxPQUFKLENBQWI7QUFDQVAsUUFBQUEsU0FBUyxDQUFDa0IsQ0FBRCxFQUFJWixRQUFKLEVBQWNNLFVBQVUsQ0FBQ0UsT0FBekIsQ0FBVDtBQUNELE9BVEg7QUFVRSxNQUFBLFFBQVEsRUFBRSxrQkFBQ0ksQ0FBRCxFQUFPO0FBQ2ZULFFBQUFBLFFBQVEsSUFBSUEsUUFBUSxDQUFDO0FBQUVKLFVBQUFBLFFBQVEsRUFBRWEsQ0FBQyxDQUFDQyxNQUFGLENBQVNDO0FBQXJCLFNBQUQsQ0FBcEI7QUFDQVosUUFBQUEsU0FBUSxJQUFJQSxTQUFRLENBQUNVLENBQUMsQ0FBQ0MsTUFBRixDQUFTQyxLQUFWLENBQXBCO0FBQ0Q7QUFiSCxPQURGO0FBQUEsR0FEWSxFQWtCWjtBQUNBLEdBQUNmLFFBQUQsQ0FuQlksQ0FBZDtBQXFCRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJUHJvcHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBFZGl0b3JDb250ZXh0IH0gZnJvbSAnLi4vLi4vQ29udGV4dCc7XG5pbXBvcnQgeyBUZXh0QXJlYUNvbW1hbmRPcmNoZXN0cmF0b3IgfSBmcm9tICcuLi8uLi9jb21tYW5kcyc7XG5pbXBvcnQgaGFuZGxlS2V5RG93biBmcm9tICcuL2hhbmRsZUtleURvd24nO1xuaW1wb3J0IHNob3J0Y3V0cyBmcm9tICcuL3Nob3J0Y3V0cyc7XG5pbXBvcnQgJy4vaW5kZXgubGVzcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dEFyZWFQcm9wc1xuICBleHRlbmRzIE9taXQ8UmVhY3QuVGV4dGFyZWFIVE1MQXR0cmlidXRlczxIVE1MVGV4dEFyZWFFbGVtZW50PiwgJ3ZhbHVlJyB8ICdvbkNoYW5nZSc+LFxuICAgIElQcm9wcyB7XG4gIG9uQ2hhbmdlPzogKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50PikgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGV4dGFyZWEocHJvcHM6IFRleHRBcmVhUHJvcHMpIHtcbiAgY29uc3QgeyBwcmVmaXhDbHMsIC4uLm90aGVyIH0gPSBwcm9wcztcbiAgY29uc3QgeyBtYXJrZG93biwgY29tbWFuZHMsIHRhYlNpemUsIG9uQ2hhbmdlLCBkaXNwYXRjaCB9ID0gdXNlQ29udGV4dChFZGl0b3JDb250ZXh0KTtcbiAgY29uc3QgdGV4dFJlZiA9IFJlYWN0LmNyZWF0ZVJlZjxIVE1MVGV4dEFyZWFFbGVtZW50PigpO1xuICBjb25zdCBleGVjdXRlUmVmID0gUmVhY3QudXNlUmVmPFRleHRBcmVhQ29tbWFuZE9yY2hlc3RyYXRvcj4oKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodGV4dFJlZi5jdXJyZW50ICYmIGRpc3BhdGNoKSB7XG4gICAgICBjb25zdCBjb21tYW5kT3JjaGVzdHJhdG9yID0gbmV3IFRleHRBcmVhQ29tbWFuZE9yY2hlc3RyYXRvcih0ZXh0UmVmLmN1cnJlbnQpO1xuICAgICAgZXhlY3V0ZVJlZi5jdXJyZW50ID0gY29tbWFuZE9yY2hlc3RyYXRvcjtcbiAgICAgIGRpc3BhdGNoKHsgdGV4dGFyZWE6IHRleHRSZWYuY3VycmVudCwgY29tbWFuZE9yY2hlc3RyYXRvciB9KTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG4gIHJldHVybiB1c2VNZW1vKFxuICAgICgpID0+IChcbiAgICAgIDx0ZXh0YXJlYVxuICAgICAgICB7Li4ub3RoZXJ9XG4gICAgICAgIHJlZj17dGV4dFJlZn1cbiAgICAgICAgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXRleHQtaW5wdXRgfVxuICAgICAgICB2YWx1ZT17bWFya2Rvd259XG4gICAgICAgIG9uU2Nyb2xsPXtwcm9wcy5vblNjcm9sbH1cbiAgICAgICAgb25LZXlEb3duPXsoZSkgPT4ge1xuICAgICAgICAgIGhhbmRsZUtleURvd24oZSwgdGFiU2l6ZSk7XG4gICAgICAgICAgc2hvcnRjdXRzKGUsIGNvbW1hbmRzLCBleGVjdXRlUmVmLmN1cnJlbnQpO1xuICAgICAgICB9fVxuICAgICAgICBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgICBkaXNwYXRjaCAmJiBkaXNwYXRjaCh7IG1hcmtkb3duOiBlLnRhcmdldC52YWx1ZSB9KTtcbiAgICAgICAgICBvbkNoYW5nZSAmJiBvbkNoYW5nZShlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgIH19XG4gICAgICAvPlxuICAgICksXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIFttYXJrZG93bl0sXG4gICk7XG59XG4iXX0=