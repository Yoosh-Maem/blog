import insertText from '../../utils/InsertTextAtPosition';
import { TextAreaTextApi } from '../../commands';
import { insertBeforeEachLine } from '../../commands/list';
/**
 * - `13` - `Enter`
 * - `9` - `Tab`
 */

function stopPropagation(e) {
  e.stopPropagation();
  e.preventDefault();
}

export default function handleKeyDown(e) {
  var tabSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  var target = e.target;
  var starVal = target.value.substr(0, target.selectionStart);
  var valArr = starVal.split('\n');
  var currentLineStr = valArr[valArr.length - 1];
  var textArea = new TextAreaTextApi(target);
  /**
   * `9` - `Tab`
   */

  if (e.code && e.code.toLowerCase() === 'tab') {
    stopPropagation(e);
    var space = new Array(tabSize + 1).join('  ');

    if (target.selectionStart !== target.selectionEnd) {
      var _star = target.value.substring(0, target.selectionStart).split('\n');

      var _end = target.value.substring(0, target.selectionEnd).split('\n');

      var modifiedTextLine = [];

      _end.forEach(function (item, idx) {
        if (item !== _star[idx]) {
          modifiedTextLine.push(item);
        }
      });

      var modifiedText = modifiedTextLine.join('\n');
      var oldSelectText = target.value.substring(target.selectionStart, target.selectionEnd);
      var newStarNum = target.value.substring(0, target.selectionStart).length;
      textArea.setSelectionRange({
        start: target.value.indexOf(modifiedText),
        end: target.selectionEnd
      });
      var modifiedTextObj = insertBeforeEachLine(modifiedText, e.shiftKey ? '' : space);
      var text = modifiedTextObj.modifiedText;

      if (e.shiftKey) {
        text = text.split('\n').map(function (item) {
          return item.replace(new RegExp("^".concat(space)), '');
        }).join('\n');
      }

      textArea.replaceSelection(text);
      var startTabSize = e.shiftKey ? -tabSize : tabSize;
      var endTabSize = e.shiftKey ? -modifiedTextLine.length * tabSize : modifiedTextLine.length * tabSize;
      textArea.setSelectionRange({
        start: newStarNum + startTabSize,
        end: newStarNum + oldSelectText.length + endTabSize
      });
    } else {
      return insertText(target, space);
    }
  } else if (e.code && e.code.toLowerCase() === 'enter' && (/^(-|\*)\s/.test(currentLineStr) || /^\d+.\s/.test(currentLineStr))) {
    /**
     * `13` - `Enter`
     */
    stopPropagation(e);
    var startStr = '\n- ';

    if (currentLineStr.startsWith('*')) {
      startStr = '\n* ';
    }

    if (/^\d+.\s/.test(currentLineStr)) {
      startStr = "\n".concat(parseInt(currentLineStr) + 1, ". ");
    }

    return insertText(target, startStr);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL2hhbmRsZUtleURvd24udHN4Il0sIm5hbWVzIjpbImluc2VydFRleHQiLCJUZXh0QXJlYVRleHRBcGkiLCJpbnNlcnRCZWZvcmVFYWNoTGluZSIsInN0b3BQcm9wYWdhdGlvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImhhbmRsZUtleURvd24iLCJ0YWJTaXplIiwidGFyZ2V0Iiwic3RhclZhbCIsInZhbHVlIiwic3Vic3RyIiwic2VsZWN0aW9uU3RhcnQiLCJ2YWxBcnIiLCJzcGxpdCIsImN1cnJlbnRMaW5lU3RyIiwibGVuZ3RoIiwidGV4dEFyZWEiLCJjb2RlIiwidG9Mb3dlckNhc2UiLCJzcGFjZSIsIkFycmF5Iiwiam9pbiIsInNlbGVjdGlvbkVuZCIsIl9zdGFyIiwic3Vic3RyaW5nIiwiX2VuZCIsIm1vZGlmaWVkVGV4dExpbmUiLCJmb3JFYWNoIiwiaXRlbSIsImlkeCIsInB1c2giLCJtb2RpZmllZFRleHQiLCJvbGRTZWxlY3RUZXh0IiwibmV3U3Rhck51bSIsInNldFNlbGVjdGlvblJhbmdlIiwic3RhcnQiLCJpbmRleE9mIiwiZW5kIiwibW9kaWZpZWRUZXh0T2JqIiwic2hpZnRLZXkiLCJ0ZXh0IiwibWFwIiwicmVwbGFjZSIsIlJlZ0V4cCIsInJlcGxhY2VTZWxlY3Rpb24iLCJzdGFydFRhYlNpemUiLCJlbmRUYWJTaXplIiwidGVzdCIsInN0YXJ0U3RyIiwic3RhcnRzV2l0aCIsInBhcnNlSW50Il0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxVQUFQLE1BQXVCLGtDQUF2QjtBQUNBLFNBQVNDLGVBQVQsUUFBZ0MsZ0JBQWhDO0FBQ0EsU0FBU0Msb0JBQVQsUUFBcUMscUJBQXJDO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU0MsZUFBVCxDQUF5QkMsQ0FBekIsRUFBc0U7QUFDcEVBLEVBQUFBLENBQUMsQ0FBQ0QsZUFBRjtBQUNBQyxFQUFBQSxDQUFDLENBQUNDLGNBQUY7QUFDRDs7QUFFRCxlQUFlLFNBQVNDLGFBQVQsQ0FBdUJGLENBQXZCLEVBQXlGO0FBQUEsTUFBckJHLE9BQXFCLHVFQUFILENBQUc7QUFDdEcsTUFBTUMsTUFBTSxHQUFHSixDQUFDLENBQUNJLE1BQWpCO0FBQ0EsTUFBTUMsT0FBTyxHQUFHRCxNQUFNLENBQUNFLEtBQVAsQ0FBYUMsTUFBYixDQUFvQixDQUFwQixFQUF1QkgsTUFBTSxDQUFDSSxjQUE5QixDQUFoQjtBQUNBLE1BQU1DLE1BQU0sR0FBR0osT0FBTyxDQUFDSyxLQUFSLENBQWMsSUFBZCxDQUFmO0FBQ0EsTUFBTUMsY0FBYyxHQUFHRixNQUFNLENBQUNBLE1BQU0sQ0FBQ0csTUFBUCxHQUFnQixDQUFqQixDQUE3QjtBQUNBLE1BQU1DLFFBQVEsR0FBRyxJQUFJaEIsZUFBSixDQUFvQk8sTUFBcEIsQ0FBakI7QUFDQTtBQUNGO0FBQ0E7O0FBQ0UsTUFBSUosQ0FBQyxDQUFDYyxJQUFGLElBQVVkLENBQUMsQ0FBQ2MsSUFBRixDQUFPQyxXQUFQLE9BQXlCLEtBQXZDLEVBQThDO0FBQzVDaEIsSUFBQUEsZUFBZSxDQUFDQyxDQUFELENBQWY7QUFDQSxRQUFNZ0IsS0FBSyxHQUFHLElBQUlDLEtBQUosQ0FBVWQsT0FBTyxHQUFHLENBQXBCLEVBQXVCZSxJQUF2QixDQUE0QixJQUE1QixDQUFkOztBQUNBLFFBQUlkLE1BQU0sQ0FBQ0ksY0FBUCxLQUEwQkosTUFBTSxDQUFDZSxZQUFyQyxFQUFtRDtBQUNqRCxVQUFNQyxLQUFLLEdBQUdoQixNQUFNLENBQUNFLEtBQVAsQ0FBYWUsU0FBYixDQUF1QixDQUF2QixFQUEwQmpCLE1BQU0sQ0FBQ0ksY0FBakMsRUFBaURFLEtBQWpELENBQXVELElBQXZELENBQWQ7O0FBQ0EsVUFBTVksSUFBSSxHQUFHbEIsTUFBTSxDQUFDRSxLQUFQLENBQWFlLFNBQWIsQ0FBdUIsQ0FBdkIsRUFBMEJqQixNQUFNLENBQUNlLFlBQWpDLEVBQStDVCxLQUEvQyxDQUFxRCxJQUFyRCxDQUFiOztBQUNBLFVBQU1hLGdCQUEwQixHQUFHLEVBQW5DOztBQUNBRCxNQUFBQSxJQUFJLENBQUNFLE9BQUwsQ0FBYSxVQUFDQyxJQUFELEVBQU9DLEdBQVAsRUFBZTtBQUMxQixZQUFJRCxJQUFJLEtBQUtMLEtBQUssQ0FBQ00sR0FBRCxDQUFsQixFQUF5QjtBQUN2QkgsVUFBQUEsZ0JBQWdCLENBQUNJLElBQWpCLENBQXNCRixJQUF0QjtBQUNEO0FBQ0YsT0FKRDs7QUFLQSxVQUFNRyxZQUFZLEdBQUdMLGdCQUFnQixDQUFDTCxJQUFqQixDQUFzQixJQUF0QixDQUFyQjtBQUNBLFVBQU1XLGFBQWEsR0FBR3pCLE1BQU0sQ0FBQ0UsS0FBUCxDQUFhZSxTQUFiLENBQXVCakIsTUFBTSxDQUFDSSxjQUE5QixFQUE4Q0osTUFBTSxDQUFDZSxZQUFyRCxDQUF0QjtBQUNBLFVBQU1XLFVBQVUsR0FBRzFCLE1BQU0sQ0FBQ0UsS0FBUCxDQUFhZSxTQUFiLENBQXVCLENBQXZCLEVBQTBCakIsTUFBTSxDQUFDSSxjQUFqQyxFQUFpREksTUFBcEU7QUFFQUMsTUFBQUEsUUFBUSxDQUFDa0IsaUJBQVQsQ0FBMkI7QUFDekJDLFFBQUFBLEtBQUssRUFBRTVCLE1BQU0sQ0FBQ0UsS0FBUCxDQUFhMkIsT0FBYixDQUFxQkwsWUFBckIsQ0FEa0I7QUFFekJNLFFBQUFBLEdBQUcsRUFBRTlCLE1BQU0sQ0FBQ2U7QUFGYSxPQUEzQjtBQUtBLFVBQU1nQixlQUFlLEdBQUdyQyxvQkFBb0IsQ0FBQzhCLFlBQUQsRUFBZTVCLENBQUMsQ0FBQ29DLFFBQUYsR0FBYSxFQUFiLEdBQWtCcEIsS0FBakMsQ0FBNUM7QUFFQSxVQUFJcUIsSUFBSSxHQUFHRixlQUFlLENBQUNQLFlBQTNCOztBQUNBLFVBQUk1QixDQUFDLENBQUNvQyxRQUFOLEVBQWdCO0FBQ2RDLFFBQUFBLElBQUksR0FBR0EsSUFBSSxDQUNSM0IsS0FESSxDQUNFLElBREYsRUFFSjRCLEdBRkksQ0FFQSxVQUFDYixJQUFEO0FBQUEsaUJBQVVBLElBQUksQ0FBQ2MsT0FBTCxDQUFhLElBQUlDLE1BQUosWUFBZXhCLEtBQWYsRUFBYixFQUFzQyxFQUF0QyxDQUFWO0FBQUEsU0FGQSxFQUdKRSxJQUhJLENBR0MsSUFIRCxDQUFQO0FBSUQ7O0FBQ0RMLE1BQUFBLFFBQVEsQ0FBQzRCLGdCQUFULENBQTBCSixJQUExQjtBQUVBLFVBQUlLLFlBQVksR0FBRzFDLENBQUMsQ0FBQ29DLFFBQUYsR0FBYSxDQUFDakMsT0FBZCxHQUF3QkEsT0FBM0M7QUFDQSxVQUFJd0MsVUFBVSxHQUFHM0MsQ0FBQyxDQUFDb0MsUUFBRixHQUFhLENBQUNiLGdCQUFnQixDQUFDWCxNQUFsQixHQUEyQlQsT0FBeEMsR0FBa0RvQixnQkFBZ0IsQ0FBQ1gsTUFBakIsR0FBMEJULE9BQTdGO0FBRUFVLE1BQUFBLFFBQVEsQ0FBQ2tCLGlCQUFULENBQTJCO0FBQ3pCQyxRQUFBQSxLQUFLLEVBQUVGLFVBQVUsR0FBR1ksWUFESztBQUV6QlIsUUFBQUEsR0FBRyxFQUFFSixVQUFVLEdBQUdELGFBQWEsQ0FBQ2pCLE1BQTNCLEdBQW9DK0I7QUFGaEIsT0FBM0I7QUFJRCxLQXBDRCxNQW9DTztBQUNMLGFBQU8vQyxVQUFVLENBQUNRLE1BQUQsRUFBU1ksS0FBVCxDQUFqQjtBQUNEO0FBQ0YsR0ExQ0QsTUEwQ08sSUFDTGhCLENBQUMsQ0FBQ2MsSUFBRixJQUNBZCxDQUFDLENBQUNjLElBQUYsQ0FBT0MsV0FBUCxPQUF5QixPQUR6QixLQUVDLFlBQVk2QixJQUFaLENBQWlCakMsY0FBakIsS0FBb0MsVUFBVWlDLElBQVYsQ0FBZWpDLGNBQWYsQ0FGckMsQ0FESyxFQUlMO0FBQ0E7QUFDSjtBQUNBO0FBQ0laLElBQUFBLGVBQWUsQ0FBQ0MsQ0FBRCxDQUFmO0FBQ0EsUUFBSTZDLFFBQVEsR0FBRyxNQUFmOztBQUNBLFFBQUlsQyxjQUFjLENBQUNtQyxVQUFmLENBQTBCLEdBQTFCLENBQUosRUFBb0M7QUFDbENELE1BQUFBLFFBQVEsR0FBRyxNQUFYO0FBQ0Q7O0FBQ0QsUUFBSSxVQUFVRCxJQUFWLENBQWVqQyxjQUFmLENBQUosRUFBb0M7QUFDbENrQyxNQUFBQSxRQUFRLGVBQVFFLFFBQVEsQ0FBQ3BDLGNBQUQsQ0FBUixHQUEyQixDQUFuQyxPQUFSO0FBQ0Q7O0FBQ0QsV0FBT2YsVUFBVSxDQUFDUSxNQUFELEVBQVN5QyxRQUFULENBQWpCO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpbnNlcnRUZXh0IGZyb20gJy4uLy4uL3V0aWxzL0luc2VydFRleHRBdFBvc2l0aW9uJztcbmltcG9ydCB7IFRleHRBcmVhVGV4dEFwaSB9IGZyb20gJy4uLy4uL2NvbW1hbmRzJztcbmltcG9ydCB7IGluc2VydEJlZm9yZUVhY2hMaW5lIH0gZnJvbSAnLi4vLi4vY29tbWFuZHMvbGlzdCc7XG5cbi8qKlxuICogLSBgMTNgIC0gYEVudGVyYFxuICogLSBgOWAgLSBgVGFiYFxuICovXG5mdW5jdGlvbiBzdG9wUHJvcGFnYXRpb24oZTogUmVhY3QuS2V5Ym9hcmRFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50Pikge1xuICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZTogUmVhY3QuS2V5Ym9hcmRFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50PiwgdGFiU2l6ZTogbnVtYmVyID0gMikge1xuICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldCBhcyBIVE1MVGV4dEFyZWFFbGVtZW50O1xuICBjb25zdCBzdGFyVmFsID0gdGFyZ2V0LnZhbHVlLnN1YnN0cigwLCB0YXJnZXQuc2VsZWN0aW9uU3RhcnQpO1xuICBjb25zdCB2YWxBcnIgPSBzdGFyVmFsLnNwbGl0KCdcXG4nKTtcbiAgY29uc3QgY3VycmVudExpbmVTdHIgPSB2YWxBcnJbdmFsQXJyLmxlbmd0aCAtIDFdO1xuICBjb25zdCB0ZXh0QXJlYSA9IG5ldyBUZXh0QXJlYVRleHRBcGkodGFyZ2V0KTtcbiAgLyoqXG4gICAqIGA5YCAtIGBUYWJgXG4gICAqL1xuICBpZiAoZS5jb2RlICYmIGUuY29kZS50b0xvd2VyQ2FzZSgpID09PSAndGFiJykge1xuICAgIHN0b3BQcm9wYWdhdGlvbihlKTtcbiAgICBjb25zdCBzcGFjZSA9IG5ldyBBcnJheSh0YWJTaXplICsgMSkuam9pbignICAnKTtcbiAgICBpZiAodGFyZ2V0LnNlbGVjdGlvblN0YXJ0ICE9PSB0YXJnZXQuc2VsZWN0aW9uRW5kKSB7XG4gICAgICBjb25zdCBfc3RhciA9IHRhcmdldC52YWx1ZS5zdWJzdHJpbmcoMCwgdGFyZ2V0LnNlbGVjdGlvblN0YXJ0KS5zcGxpdCgnXFxuJyk7XG4gICAgICBjb25zdCBfZW5kID0gdGFyZ2V0LnZhbHVlLnN1YnN0cmluZygwLCB0YXJnZXQuc2VsZWN0aW9uRW5kKS5zcGxpdCgnXFxuJyk7XG4gICAgICBjb25zdCBtb2RpZmllZFRleHRMaW5lOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgX2VuZC5mb3JFYWNoKChpdGVtLCBpZHgpID0+IHtcbiAgICAgICAgaWYgKGl0ZW0gIT09IF9zdGFyW2lkeF0pIHtcbiAgICAgICAgICBtb2RpZmllZFRleHRMaW5lLnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uc3QgbW9kaWZpZWRUZXh0ID0gbW9kaWZpZWRUZXh0TGluZS5qb2luKCdcXG4nKTtcbiAgICAgIGNvbnN0IG9sZFNlbGVjdFRleHQgPSB0YXJnZXQudmFsdWUuc3Vic3RyaW5nKHRhcmdldC5zZWxlY3Rpb25TdGFydCwgdGFyZ2V0LnNlbGVjdGlvbkVuZCk7XG4gICAgICBjb25zdCBuZXdTdGFyTnVtID0gdGFyZ2V0LnZhbHVlLnN1YnN0cmluZygwLCB0YXJnZXQuc2VsZWN0aW9uU3RhcnQpLmxlbmd0aDtcblxuICAgICAgdGV4dEFyZWEuc2V0U2VsZWN0aW9uUmFuZ2Uoe1xuICAgICAgICBzdGFydDogdGFyZ2V0LnZhbHVlLmluZGV4T2YobW9kaWZpZWRUZXh0KSxcbiAgICAgICAgZW5kOiB0YXJnZXQuc2VsZWN0aW9uRW5kLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IG1vZGlmaWVkVGV4dE9iaiA9IGluc2VydEJlZm9yZUVhY2hMaW5lKG1vZGlmaWVkVGV4dCwgZS5zaGlmdEtleSA/ICcnIDogc3BhY2UpO1xuXG4gICAgICBsZXQgdGV4dCA9IG1vZGlmaWVkVGV4dE9iai5tb2RpZmllZFRleHQ7XG4gICAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICB0ZXh0ID0gdGV4dFxuICAgICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgICAubWFwKChpdGVtKSA9PiBpdGVtLnJlcGxhY2UobmV3IFJlZ0V4cChgXiR7c3BhY2V9YCksICcnKSlcbiAgICAgICAgICAuam9pbignXFxuJyk7XG4gICAgICB9XG4gICAgICB0ZXh0QXJlYS5yZXBsYWNlU2VsZWN0aW9uKHRleHQpO1xuXG4gICAgICBsZXQgc3RhcnRUYWJTaXplID0gZS5zaGlmdEtleSA/IC10YWJTaXplIDogdGFiU2l6ZTtcbiAgICAgIGxldCBlbmRUYWJTaXplID0gZS5zaGlmdEtleSA/IC1tb2RpZmllZFRleHRMaW5lLmxlbmd0aCAqIHRhYlNpemUgOiBtb2RpZmllZFRleHRMaW5lLmxlbmd0aCAqIHRhYlNpemU7XG5cbiAgICAgIHRleHRBcmVhLnNldFNlbGVjdGlvblJhbmdlKHtcbiAgICAgICAgc3RhcnQ6IG5ld1N0YXJOdW0gKyBzdGFydFRhYlNpemUsXG4gICAgICAgIGVuZDogbmV3U3Rhck51bSArIG9sZFNlbGVjdFRleHQubGVuZ3RoICsgZW5kVGFiU2l6ZSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaW5zZXJ0VGV4dCh0YXJnZXQsIHNwYWNlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoXG4gICAgZS5jb2RlICYmXG4gICAgZS5jb2RlLnRvTG93ZXJDYXNlKCkgPT09ICdlbnRlcicgJiZcbiAgICAoL14oLXxcXCopXFxzLy50ZXN0KGN1cnJlbnRMaW5lU3RyKSB8fCAvXlxcZCsuXFxzLy50ZXN0KGN1cnJlbnRMaW5lU3RyKSlcbiAgKSB7XG4gICAgLyoqXG4gICAgICogYDEzYCAtIGBFbnRlcmBcbiAgICAgKi9cbiAgICBzdG9wUHJvcGFnYXRpb24oZSk7XG4gICAgbGV0IHN0YXJ0U3RyID0gJ1xcbi0gJztcbiAgICBpZiAoY3VycmVudExpbmVTdHIuc3RhcnRzV2l0aCgnKicpKSB7XG4gICAgICBzdGFydFN0ciA9ICdcXG4qICc7XG4gICAgfVxuICAgIGlmICgvXlxcZCsuXFxzLy50ZXN0KGN1cnJlbnRMaW5lU3RyKSkge1xuICAgICAgc3RhcnRTdHIgPSBgXFxuJHtwYXJzZUludChjdXJyZW50TGluZVN0cikgKyAxfS4gYDtcbiAgICB9XG4gICAgcmV0dXJuIGluc2VydFRleHQodGFyZ2V0LCBzdGFydFN0cik7XG4gIH1cbn1cbiJdfQ==