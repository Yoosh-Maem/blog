import _extends from "@babel/runtime/helpers/extends";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React, { useEffect, useMemo, useContext } from 'react';
import 'prismjs/components/prism-markdown.js';
import "./index.css";
import { EditorContext } from '../../Context';
import Markdown from './Markdown';
import Textarea from './Textarea';
export default function TextArea(props) {
  var _ref = props || {},
      prefixCls = _ref.prefixCls,
      className = _ref.className,
      onScroll = _ref.onScroll,
      otherProps = _objectWithoutProperties(_ref, ["prefixCls", "className", "onScroll"]);

  var _useContext = useContext(EditorContext),
      scrollTop = _useContext.scrollTop,
      dispatch = _useContext.dispatch;

  var warp = /*#__PURE__*/React.createRef();
  useEffect(function () {
    var state = {};

    if (warp.current) {
      state.textareaWarp = warp.current || undefined;
      warp.current.scrollTop = scrollTop || 0;
    }

    if (dispatch) {
      dispatch(_objectSpread({}, state));
    }
  }, []);
  return useMemo(function () {
    return /*#__PURE__*/React.createElement("div", {
      ref: warp,
      className: "".concat(prefixCls, "-aree ").concat(className || ''),
      onScroll: onScroll
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-text")
    }, /*#__PURE__*/React.createElement(Markdown, {
      prefixCls: prefixCls
    }), /*#__PURE__*/React.createElement(Textarea, _extends({
      prefixCls: prefixCls
    }, otherProps))));
  }, []);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL2luZGV4LnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUVmZmVjdCIsInVzZU1lbW8iLCJ1c2VDb250ZXh0IiwiRWRpdG9yQ29udGV4dCIsIk1hcmtkb3duIiwiVGV4dGFyZWEiLCJUZXh0QXJlYSIsInByb3BzIiwicHJlZml4Q2xzIiwiY2xhc3NOYW1lIiwib25TY3JvbGwiLCJvdGhlclByb3BzIiwic2Nyb2xsVG9wIiwiZGlzcGF0Y2giLCJ3YXJwIiwiY3JlYXRlUmVmIiwic3RhdGUiLCJjdXJyZW50IiwidGV4dGFyZWFXYXJwIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxTQUFoQixFQUEyQkMsT0FBM0IsRUFBb0NDLFVBQXBDLFFBQXNELE9BQXREO0FBQ0EsT0FBTyxzQ0FBUDtBQUVBO0FBQ0EsU0FBU0MsYUFBVCxRQUE0QyxlQUE1QztBQUVBLE9BQU9DLFFBQVAsTUFBcUIsWUFBckI7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLFlBQXJCO0FBY0EsZUFBZSxTQUFTQyxRQUFULENBQWtCQyxLQUFsQixFQUF5QztBQUFBLGFBQ0lBLEtBQUssSUFBSSxFQURiO0FBQUEsTUFDOUNDLFNBRDhDLFFBQzlDQSxTQUQ4QztBQUFBLE1BQ25DQyxTQURtQyxRQUNuQ0EsU0FEbUM7QUFBQSxNQUN4QkMsUUFEd0IsUUFDeEJBLFFBRHdCO0FBQUEsTUFDWEMsVUFEVzs7QUFBQSxvQkFFdEJULFVBQVUsQ0FBQ0MsYUFBRCxDQUZZO0FBQUEsTUFFOUNTLFNBRjhDLGVBRTlDQSxTQUY4QztBQUFBLE1BRW5DQyxRQUZtQyxlQUVuQ0EsUUFGbUM7O0FBR3RELE1BQU1DLElBQUksZ0JBQUdmLEtBQUssQ0FBQ2dCLFNBQU4sRUFBYjtBQUNBZixFQUFBQSxTQUFTLENBQUMsWUFBTTtBQUNkLFFBQU1nQixLQUFtQixHQUFHLEVBQTVCOztBQUNBLFFBQUlGLElBQUksQ0FBQ0csT0FBVCxFQUFrQjtBQUNoQkQsTUFBQUEsS0FBSyxDQUFDRSxZQUFOLEdBQXFCSixJQUFJLENBQUNHLE9BQUwsSUFBZ0JFLFNBQXJDO0FBQ0FMLE1BQUFBLElBQUksQ0FBQ0csT0FBTCxDQUFhTCxTQUFiLEdBQXlCQSxTQUFTLElBQUksQ0FBdEM7QUFDRDs7QUFDRCxRQUFJQyxRQUFKLEVBQWM7QUFDWkEsTUFBQUEsUUFBUSxtQkFBTUcsS0FBTixFQUFSO0FBQ0Q7QUFDRixHQVRRLEVBU04sRUFUTSxDQUFUO0FBVUEsU0FBT2YsT0FBTyxDQUNaO0FBQUEsd0JBQ0U7QUFBSyxNQUFBLEdBQUcsRUFBRWEsSUFBVjtBQUFnQixNQUFBLFNBQVMsWUFBS04sU0FBTCxtQkFBdUJDLFNBQVMsSUFBSSxFQUFwQyxDQUF6QjtBQUFtRSxNQUFBLFFBQVEsRUFBRUM7QUFBN0Usb0JBQ0U7QUFBSyxNQUFBLFNBQVMsWUFBS0YsU0FBTDtBQUFkLG9CQUNFLG9CQUFDLFFBQUQ7QUFBVSxNQUFBLFNBQVMsRUFBRUE7QUFBckIsTUFERixlQUVFLG9CQUFDLFFBQUQ7QUFBVSxNQUFBLFNBQVMsRUFBRUE7QUFBckIsT0FBb0NHLFVBQXBDLEVBRkYsQ0FERixDQURGO0FBQUEsR0FEWSxFQVNaLEVBVFksQ0FBZDtBQVdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAncHJpc21qcy9jb21wb25lbnRzL3ByaXNtLW1hcmtkb3duLmpzJztcbmltcG9ydCB7IElQcm9wcyB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCAnLi9pbmRleC5sZXNzJztcbmltcG9ydCB7IEVkaXRvckNvbnRleHQsIENvbnRleHRTdG9yZSB9IGZyb20gJy4uLy4uL0NvbnRleHQnO1xuXG5pbXBvcnQgTWFya2Rvd24gZnJvbSAnLi9NYXJrZG93bic7XG5pbXBvcnQgVGV4dGFyZWEgZnJvbSAnLi9UZXh0YXJlYSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRleHRBcmVhUHJvcHNcbiAgZXh0ZW5kcyBPbWl0PFJlYWN0LlRleHRhcmVhSFRNTEF0dHJpYnV0ZXM8SFRNTFRleHRBcmVhRWxlbWVudD4sICd2YWx1ZScgfCAnb25DaGFuZ2UnIHwgJ29uU2Nyb2xsJz4sXG4gICAgSVByb3BzIHtcbiAgb25TY3JvbGw/OiAoZTogUmVhY3QuVUlFdmVudDxIVE1MRGl2RWxlbWVudD4pID0+IHZvaWQ7XG4gIHZhbHVlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBUZXh0QXJlYVJlZiA9IHtcbiAgdGV4dD86IEhUTUxUZXh0QXJlYUVsZW1lbnQ7XG4gIHdhcnA/OiBIVE1MRGl2RWxlbWVudDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRleHRBcmVhKHByb3BzOiBJVGV4dEFyZWFQcm9wcykge1xuICBjb25zdCB7IHByZWZpeENscywgY2xhc3NOYW1lLCBvblNjcm9sbCwgLi4ub3RoZXJQcm9wcyB9ID0gcHJvcHMgfHwge307XG4gIGNvbnN0IHsgc2Nyb2xsVG9wLCBkaXNwYXRjaCB9ID0gdXNlQ29udGV4dChFZGl0b3JDb250ZXh0KTtcbiAgY29uc3Qgd2FycCA9IFJlYWN0LmNyZWF0ZVJlZjxIVE1MRGl2RWxlbWVudD4oKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzdGF0ZTogQ29udGV4dFN0b3JlID0ge307XG4gICAgaWYgKHdhcnAuY3VycmVudCkge1xuICAgICAgc3RhdGUudGV4dGFyZWFXYXJwID0gd2FycC5jdXJyZW50IHx8IHVuZGVmaW5lZDtcbiAgICAgIHdhcnAuY3VycmVudC5zY3JvbGxUb3AgPSBzY3JvbGxUb3AgfHwgMDtcbiAgICB9XG4gICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICBkaXNwYXRjaCh7IC4uLnN0YXRlIH0pO1xuICAgIH1cbiAgfSwgW10pO1xuICByZXR1cm4gdXNlTWVtbyhcbiAgICAoKSA9PiAoXG4gICAgICA8ZGl2IHJlZj17d2FycH0gY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWFyZWUgJHtjbGFzc05hbWUgfHwgJyd9YH0gb25TY3JvbGw9e29uU2Nyb2xsfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tdGV4dGB9PlxuICAgICAgICAgIDxNYXJrZG93biBwcmVmaXhDbHM9e3ByZWZpeENsc30gLz5cbiAgICAgICAgICA8VGV4dGFyZWEgcHJlZml4Q2xzPXtwcmVmaXhDbHN9IHsuLi5vdGhlclByb3BzfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICksXG4gICAgW10sXG4gICk7XG59XG4iXX0=