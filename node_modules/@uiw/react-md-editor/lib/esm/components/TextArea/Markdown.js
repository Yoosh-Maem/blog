import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React, { useContext, useEffect, useMemo } from 'react';
import Prism from 'prismjs';
import { EditorContext } from '../../Context';
import "./index.css";
export default function Markdown(props) {
  var prefixCls = props.prefixCls,
      other = _objectWithoutProperties(props, ["prefixCls"]);

  var _useContext = useContext(EditorContext),
      _useContext$markdown = _useContext.markdown,
      markdown = _useContext$markdown === void 0 ? '' : _useContext$markdown,
      highlightEnable = _useContext.highlightEnable,
      dispatch = _useContext.dispatch;

  var preRef = /*#__PURE__*/React.createRef();
  useEffect(function () {
    if (preRef.current && dispatch) {
      dispatch({
        textareaPre: preRef.current
      });
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);

  var highlight = function highlight() {
    if (!preRef.current) return;

    if (highlightEnable && typeof markdown === 'string') {
      var html = Prism.highlight(markdown, Prism.languages.markdown, 'markdown');
      preRef.current.innerHTML = "".concat(html);
    } else {
      preRef.current.innerText = "".concat(markdown);
    }
  };

  useEffect(function () {
    highlight(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [markdown, preRef.current, highlightEnable]);
  return useMemo(function () {
    return /*#__PURE__*/React.createElement("pre", _extends({}, other, {
      ref: preRef,
      className: "".concat(prefixCls, "-text-pre wmde-markdown-color")
    }));
  }, [other, preRef, prefixCls]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL01hcmtkb3duLnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VNZW1vIiwiUHJpc20iLCJFZGl0b3JDb250ZXh0IiwiTWFya2Rvd24iLCJwcm9wcyIsInByZWZpeENscyIsIm90aGVyIiwibWFya2Rvd24iLCJoaWdobGlnaHRFbmFibGUiLCJkaXNwYXRjaCIsInByZVJlZiIsImNyZWF0ZVJlZiIsImN1cnJlbnQiLCJ0ZXh0YXJlYVByZSIsImhpZ2hsaWdodCIsImh0bWwiLCJsYW5ndWFnZXMiLCJpbm5lckhUTUwiLCJpbm5lclRleHQiXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsVUFBaEIsRUFBNEJDLFNBQTVCLEVBQXVDQyxPQUF2QyxRQUFzRCxPQUF0RDtBQUVBLE9BQU9DLEtBQVAsTUFBa0IsU0FBbEI7QUFDQSxTQUFTQyxhQUFULFFBQThCLGVBQTlCO0FBQ0E7QUFJQSxlQUFlLFNBQVNDLFFBQVQsQ0FBa0JDLEtBQWxCLEVBQXdDO0FBQUEsTUFDN0NDLFNBRDZDLEdBQ3JCRCxLQURxQixDQUM3Q0MsU0FENkM7QUFBQSxNQUMvQkMsS0FEK0IsNEJBQ3JCRixLQURxQjs7QUFBQSxvQkFFQU4sVUFBVSxDQUFDSSxhQUFELENBRlY7QUFBQSx5Q0FFN0NLLFFBRjZDO0FBQUEsTUFFN0NBLFFBRjZDLHFDQUVsQyxFQUZrQztBQUFBLE1BRTlCQyxlQUY4QixlQUU5QkEsZUFGOEI7QUFBQSxNQUViQyxRQUZhLGVBRWJBLFFBRmE7O0FBR3JELE1BQU1DLE1BQU0sZ0JBQUdiLEtBQUssQ0FBQ2MsU0FBTixFQUFmO0FBQ0FaLEVBQUFBLFNBQVMsQ0FBQyxZQUFNO0FBQ2QsUUFBSVcsTUFBTSxDQUFDRSxPQUFQLElBQWtCSCxRQUF0QixFQUFnQztBQUM5QkEsTUFBQUEsUUFBUSxDQUFDO0FBQUVJLFFBQUFBLFdBQVcsRUFBRUgsTUFBTSxDQUFDRTtBQUF0QixPQUFELENBQVI7QUFDRCxLQUhhLENBSWQ7O0FBQ0QsR0FMUSxFQUtOLEVBTE0sQ0FBVDs7QUFNQSxNQUFNRSxTQUFTLEdBQUcsU0FBWkEsU0FBWSxHQUFNO0FBQ3RCLFFBQUksQ0FBQ0osTUFBTSxDQUFDRSxPQUFaLEVBQXFCOztBQUNyQixRQUFJSixlQUFlLElBQUksT0FBT0QsUUFBUCxLQUFvQixRQUEzQyxFQUFxRDtBQUNuRCxVQUFNUSxJQUFJLEdBQUdkLEtBQUssQ0FBQ2EsU0FBTixDQUFnQlAsUUFBaEIsRUFBb0NOLEtBQUssQ0FBQ2UsU0FBTixDQUFnQlQsUUFBcEQsRUFBOEQsVUFBOUQsQ0FBYjtBQUNBRyxNQUFBQSxNQUFNLENBQUNFLE9BQVAsQ0FBZUssU0FBZixhQUE4QkYsSUFBOUI7QUFDRCxLQUhELE1BR087QUFDTEwsTUFBQUEsTUFBTSxDQUFDRSxPQUFQLENBQWVNLFNBQWYsYUFBOEJYLFFBQTlCO0FBQ0Q7QUFDRixHQVJEOztBQVNBUixFQUFBQSxTQUFTLENBQUMsWUFBTTtBQUNkZSxJQUFBQSxTQUFTLEdBREssQ0FFZDtBQUNELEdBSFEsRUFHTixDQUFDUCxRQUFELEVBQVdHLE1BQU0sQ0FBQ0UsT0FBbEIsRUFBMkJKLGVBQTNCLENBSE0sQ0FBVDtBQUtBLFNBQU9SLE9BQU8sQ0FBQztBQUFBLHdCQUFNLHdDQUFTTSxLQUFUO0FBQWdCLE1BQUEsR0FBRyxFQUFFSSxNQUFyQjtBQUE2QixNQUFBLFNBQVMsWUFBS0wsU0FBTDtBQUF0QyxPQUFOO0FBQUEsR0FBRCxFQUFnRyxDQUM1R0MsS0FENEcsRUFFNUdJLE1BRjRHLEVBRzVHTCxTQUg0RyxDQUFoRyxDQUFkO0FBS0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSVByb3BzIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IFByaXNtIGZyb20gJ3ByaXNtanMnO1xuaW1wb3J0IHsgRWRpdG9yQ29udGV4dCB9IGZyb20gJy4uLy4uL0NvbnRleHQnO1xuaW1wb3J0ICcuL2luZGV4Lmxlc3MnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1hcmtkb3duUHJvcHMgZXh0ZW5kcyBJUHJvcHMsIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxQcmVFbGVtZW50PiB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNYXJrZG93bihwcm9wczogTWFya2Rvd25Qcm9wcykge1xuICBjb25zdCB7IHByZWZpeENscywgLi4ub3RoZXIgfSA9IHByb3BzO1xuICBjb25zdCB7IG1hcmtkb3duID0gJycsIGhpZ2hsaWdodEVuYWJsZSwgZGlzcGF0Y2ggfSA9IHVzZUNvbnRleHQoRWRpdG9yQ29udGV4dCk7XG4gIGNvbnN0IHByZVJlZiA9IFJlYWN0LmNyZWF0ZVJlZjxIVE1MUHJlRWxlbWVudD4oKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocHJlUmVmLmN1cnJlbnQgJiYgZGlzcGF0Y2gpIHtcbiAgICAgIGRpc3BhdGNoKHsgdGV4dGFyZWFQcmU6IHByZVJlZi5jdXJyZW50IH0pO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcbiAgY29uc3QgaGlnaGxpZ2h0ID0gKCkgPT4ge1xuICAgIGlmICghcHJlUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICBpZiAoaGlnaGxpZ2h0RW5hYmxlICYmIHR5cGVvZiBtYXJrZG93biA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IGh0bWwgPSBQcmlzbS5oaWdobGlnaHQobWFya2Rvd24gYXMgc3RyaW5nLCBQcmlzbS5sYW5ndWFnZXMubWFya2Rvd24sICdtYXJrZG93bicpO1xuICAgICAgcHJlUmVmLmN1cnJlbnQuaW5uZXJIVE1MID0gYCR7aHRtbH1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmVSZWYuY3VycmVudC5pbm5lclRleHQgPSBgJHttYXJrZG93bn1gO1xuICAgIH1cbiAgfTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBoaWdobGlnaHQoKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFttYXJrZG93biwgcHJlUmVmLmN1cnJlbnQsIGhpZ2hsaWdodEVuYWJsZV0pO1xuXG4gIHJldHVybiB1c2VNZW1vKCgpID0+IDxwcmUgey4uLm90aGVyfSByZWY9e3ByZVJlZn0gY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXRleHQtcHJlIHdtZGUtbWFya2Rvd24tY29sb3JgfSAvPiwgW1xuICAgIG90aGVyLFxuICAgIHByZVJlZixcbiAgICBwcmVmaXhDbHMsXG4gIF0pO1xufVxuIl19