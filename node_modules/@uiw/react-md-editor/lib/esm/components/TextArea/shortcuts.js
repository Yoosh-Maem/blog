import _objectSpread from "@babel/runtime/helpers/objectSpread2";

function getCommands() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var resulte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  data.forEach(function (item) {
    if (item.children && Array.isArray(item.children)) {
      resulte = _objectSpread(_objectSpread({}, resulte), getCommands(item.children || []));
    } else if (item.keyCommand && item.shortcuts && item.execute) {
      resulte[item.shortcuts.toLocaleLowerCase()] = item;
    }
  });
  return resulte;
}

export default function shortcutsHandle(e) {
  var commands = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var commandOrchestrator = arguments.length > 2 ? arguments[2] : undefined;
  var data = getCommands(commands || []);
  var shortcuts = [];

  if (e.altKey) {
    shortcuts.push('alt');
  }

  if (e.shiftKey) {
    shortcuts.push('shift');
  }

  if (e.metaKey) {
    shortcuts.push('cmd');
  }

  if (e.ctrlKey) {
    shortcuts.push('ctrl');
  }

  if (shortcuts.length > 0 && !/(control|alt|meta|shift)/.test(e.key.toLocaleLowerCase())) {
    shortcuts.push(e.key.toLocaleLowerCase());
  }

  if (shortcuts.length < 2) {
    return;
  }

  var equal = !!data[shortcuts.join('+')];
  var command = equal ? data[shortcuts.join('+')] : undefined;
  Object.keys(data).forEach(function (item) {
    var isequal = item.split('+').every(function (v) {
      if (/ctrlcmd/.test(v)) {
        return shortcuts.includes('ctrl') || shortcuts.includes('cmd');
      }

      return shortcuts.includes(v);
    });

    if (isequal) {
      command = data[item];
    }
  });

  if (command && commandOrchestrator) {
    e.stopPropagation();
    e.preventDefault();
    commandOrchestrator.executeCommand(command);
    return;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL3Nob3J0Y3V0cy50cyJdLCJuYW1lcyI6WyJnZXRDb21tYW5kcyIsImRhdGEiLCJyZXN1bHRlIiwiZm9yRWFjaCIsIml0ZW0iLCJjaGlsZHJlbiIsIkFycmF5IiwiaXNBcnJheSIsImtleUNvbW1hbmQiLCJzaG9ydGN1dHMiLCJleGVjdXRlIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJzaG9ydGN1dHNIYW5kbGUiLCJlIiwiY29tbWFuZHMiLCJjb21tYW5kT3JjaGVzdHJhdG9yIiwiYWx0S2V5IiwicHVzaCIsInNoaWZ0S2V5IiwibWV0YUtleSIsImN0cmxLZXkiLCJsZW5ndGgiLCJ0ZXN0Iiwia2V5IiwiZXF1YWwiLCJqb2luIiwiY29tbWFuZCIsInVuZGVmaW5lZCIsIk9iamVjdCIsImtleXMiLCJpc2VxdWFsIiwic3BsaXQiLCJldmVyeSIsInYiLCJpbmNsdWRlcyIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiZXhlY3V0ZUNvbW1hbmQiXSwibWFwcGluZ3MiOiI7O0FBRUEsU0FBU0EsV0FBVCxHQUE4RztBQUFBLE1BQXpGQyxJQUF5Rix1RUFBdEUsRUFBc0U7QUFBQSxNQUFsRUMsT0FBa0UsdUVBQTlCLEVBQThCO0FBQzVHRCxFQUFBQSxJQUFJLENBQUNFLE9BQUwsQ0FBYSxVQUFDQyxJQUFELEVBQVU7QUFDckIsUUFBSUEsSUFBSSxDQUFDQyxRQUFMLElBQWlCQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsSUFBSSxDQUFDQyxRQUFuQixDQUFyQixFQUFtRDtBQUNqREgsTUFBQUEsT0FBTyxtQ0FBUUEsT0FBUixHQUFvQkYsV0FBVyxDQUFDSSxJQUFJLENBQUNDLFFBQUwsSUFBaUIsRUFBbEIsQ0FBL0IsQ0FBUDtBQUNELEtBRkQsTUFFTyxJQUFJRCxJQUFJLENBQUNJLFVBQUwsSUFBbUJKLElBQUksQ0FBQ0ssU0FBeEIsSUFBcUNMLElBQUksQ0FBQ00sT0FBOUMsRUFBdUQ7QUFDNURSLE1BQUFBLE9BQU8sQ0FBQ0UsSUFBSSxDQUFDSyxTQUFMLENBQWVFLGlCQUFmLEVBQUQsQ0FBUCxHQUE4Q1AsSUFBOUM7QUFDRDtBQUNGLEdBTkQ7QUFPQSxTQUFPRixPQUFQO0FBQ0Q7O0FBRUQsZUFBZSxTQUFTVSxlQUFULENBQ2JDLENBRGEsRUFJYjtBQUFBLE1BRkFDLFFBRUEsdUVBRnVCLEVBRXZCO0FBQUEsTUFEQUMsbUJBQ0E7QUFDQSxNQUFNZCxJQUFJLEdBQUdELFdBQVcsQ0FBQ2MsUUFBUSxJQUFJLEVBQWIsQ0FBeEI7QUFDQSxNQUFNTCxTQUE4QixHQUFHLEVBQXZDOztBQUNBLE1BQUlJLENBQUMsQ0FBQ0csTUFBTixFQUFjO0FBQ1pQLElBQUFBLFNBQVMsQ0FBQ1EsSUFBVixDQUFlLEtBQWY7QUFDRDs7QUFDRCxNQUFJSixDQUFDLENBQUNLLFFBQU4sRUFBZ0I7QUFDZFQsSUFBQUEsU0FBUyxDQUFDUSxJQUFWLENBQWUsT0FBZjtBQUNEOztBQUNELE1BQUlKLENBQUMsQ0FBQ00sT0FBTixFQUFlO0FBQ2JWLElBQUFBLFNBQVMsQ0FBQ1EsSUFBVixDQUFlLEtBQWY7QUFDRDs7QUFDRCxNQUFJSixDQUFDLENBQUNPLE9BQU4sRUFBZTtBQUNiWCxJQUFBQSxTQUFTLENBQUNRLElBQVYsQ0FBZSxNQUFmO0FBQ0Q7O0FBQ0QsTUFBSVIsU0FBUyxDQUFDWSxNQUFWLEdBQW1CLENBQW5CLElBQXdCLENBQUMsMkJBQTJCQyxJQUEzQixDQUFnQ1QsQ0FBQyxDQUFDVSxHQUFGLENBQU1aLGlCQUFOLEVBQWhDLENBQTdCLEVBQXlGO0FBQ3ZGRixJQUFBQSxTQUFTLENBQUNRLElBQVYsQ0FBZUosQ0FBQyxDQUFDVSxHQUFGLENBQU1aLGlCQUFOLEVBQWY7QUFDRDs7QUFDRCxNQUFJRixTQUFTLENBQUNZLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEI7QUFDeEI7QUFDRDs7QUFFRCxNQUFJRyxLQUFLLEdBQUcsQ0FBQyxDQUFDdkIsSUFBSSxDQUFDUSxTQUFTLENBQUNnQixJQUFWLENBQWUsR0FBZixDQUFELENBQWxCO0FBQ0EsTUFBSUMsT0FBTyxHQUFHRixLQUFLLEdBQUd2QixJQUFJLENBQUNRLFNBQVMsQ0FBQ2dCLElBQVYsQ0FBZSxHQUFmLENBQUQsQ0FBUCxHQUErQkUsU0FBbEQ7QUFFQUMsRUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVk1QixJQUFaLEVBQWtCRSxPQUFsQixDQUEwQixVQUFDQyxJQUFELEVBQVU7QUFDbEMsUUFBTTBCLE9BQU8sR0FBRzFCLElBQUksQ0FBQzJCLEtBQUwsQ0FBVyxHQUFYLEVBQWdCQyxLQUFoQixDQUFzQixVQUFDQyxDQUFELEVBQU87QUFDM0MsVUFBSSxVQUFVWCxJQUFWLENBQWVXLENBQWYsQ0FBSixFQUF1QjtBQUNyQixlQUFPeEIsU0FBUyxDQUFDeUIsUUFBVixDQUFtQixNQUFuQixLQUE4QnpCLFNBQVMsQ0FBQ3lCLFFBQVYsQ0FBbUIsS0FBbkIsQ0FBckM7QUFDRDs7QUFDRCxhQUFPekIsU0FBUyxDQUFDeUIsUUFBVixDQUFtQkQsQ0FBbkIsQ0FBUDtBQUNELEtBTGUsQ0FBaEI7O0FBTUEsUUFBSUgsT0FBSixFQUFhO0FBQ1hKLE1BQUFBLE9BQU8sR0FBR3pCLElBQUksQ0FBQ0csSUFBRCxDQUFkO0FBQ0Q7QUFDRixHQVZEOztBQVdBLE1BQUlzQixPQUFPLElBQUlYLG1CQUFmLEVBQW9DO0FBQ2xDRixJQUFBQSxDQUFDLENBQUNzQixlQUFGO0FBQ0F0QixJQUFBQSxDQUFDLENBQUN1QixjQUFGO0FBQ0FyQixJQUFBQSxtQkFBbUIsQ0FBQ3NCLGNBQXBCLENBQW1DWCxPQUFuQztBQUNBO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDb21tYW5kLCBUZXh0QXJlYUNvbW1hbmRPcmNoZXN0cmF0b3IgfSBmcm9tICcuLi8uLi9jb21tYW5kcyc7XG5cbmZ1bmN0aW9uIGdldENvbW1hbmRzKGRhdGE6IElDb21tYW5kW10gPSBbXSwgcmVzdWx0ZTogUmVjb3JkPHN0cmluZywgSUNvbW1hbmQ+ID0ge30pOiBSZWNvcmQ8c3RyaW5nLCBJQ29tbWFuZD4ge1xuICBkYXRhLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBpZiAoaXRlbS5jaGlsZHJlbiAmJiBBcnJheS5pc0FycmF5KGl0ZW0uY2hpbGRyZW4pKSB7XG4gICAgICByZXN1bHRlID0geyAuLi5yZXN1bHRlLCAuLi5nZXRDb21tYW5kcyhpdGVtLmNoaWxkcmVuIHx8IFtdKSB9O1xuICAgIH0gZWxzZSBpZiAoaXRlbS5rZXlDb21tYW5kICYmIGl0ZW0uc2hvcnRjdXRzICYmIGl0ZW0uZXhlY3V0ZSkge1xuICAgICAgcmVzdWx0ZVtpdGVtLnNob3J0Y3V0cy50b0xvY2FsZUxvd2VyQ2FzZSgpXSA9IGl0ZW07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNob3J0Y3V0c0hhbmRsZShcbiAgZTogUmVhY3QuS2V5Ym9hcmRFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50PixcbiAgY29tbWFuZHM6IElDb21tYW5kW10gPSBbXSxcbiAgY29tbWFuZE9yY2hlc3RyYXRvcj86IFRleHRBcmVhQ29tbWFuZE9yY2hlc3RyYXRvcixcbikge1xuICBjb25zdCBkYXRhID0gZ2V0Q29tbWFuZHMoY29tbWFuZHMgfHwgW10pO1xuICBjb25zdCBzaG9ydGN1dHM6IChzdHJpbmcgfCBudW1iZXIpW10gPSBbXTtcbiAgaWYgKGUuYWx0S2V5KSB7XG4gICAgc2hvcnRjdXRzLnB1c2goJ2FsdCcpO1xuICB9XG4gIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgc2hvcnRjdXRzLnB1c2goJ3NoaWZ0Jyk7XG4gIH1cbiAgaWYgKGUubWV0YUtleSkge1xuICAgIHNob3J0Y3V0cy5wdXNoKCdjbWQnKTtcbiAgfVxuICBpZiAoZS5jdHJsS2V5KSB7XG4gICAgc2hvcnRjdXRzLnB1c2goJ2N0cmwnKTtcbiAgfVxuICBpZiAoc2hvcnRjdXRzLmxlbmd0aCA+IDAgJiYgIS8oY29udHJvbHxhbHR8bWV0YXxzaGlmdCkvLnRlc3QoZS5rZXkudG9Mb2NhbGVMb3dlckNhc2UoKSkpIHtcbiAgICBzaG9ydGN1dHMucHVzaChlLmtleS50b0xvY2FsZUxvd2VyQ2FzZSgpKTtcbiAgfVxuICBpZiAoc2hvcnRjdXRzLmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgZXF1YWwgPSAhIWRhdGFbc2hvcnRjdXRzLmpvaW4oJysnKV07XG4gIGxldCBjb21tYW5kID0gZXF1YWwgPyBkYXRhW3Nob3J0Y3V0cy5qb2luKCcrJyldIDogdW5kZWZpbmVkO1xuXG4gIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBjb25zdCBpc2VxdWFsID0gaXRlbS5zcGxpdCgnKycpLmV2ZXJ5KCh2KSA9PiB7XG4gICAgICBpZiAoL2N0cmxjbWQvLnRlc3QodikpIHtcbiAgICAgICAgcmV0dXJuIHNob3J0Y3V0cy5pbmNsdWRlcygnY3RybCcpIHx8IHNob3J0Y3V0cy5pbmNsdWRlcygnY21kJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2hvcnRjdXRzLmluY2x1ZGVzKHYpO1xuICAgIH0pO1xuICAgIGlmIChpc2VxdWFsKSB7XG4gICAgICBjb21tYW5kID0gZGF0YVtpdGVtXTtcbiAgICB9XG4gIH0pO1xuICBpZiAoY29tbWFuZCAmJiBjb21tYW5kT3JjaGVzdHJhdG9yKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29tbWFuZE9yY2hlc3RyYXRvci5leGVjdXRlQ29tbWFuZChjb21tYW5kKTtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==