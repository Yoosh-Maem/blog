"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Textarea;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _Context = require("../../Context");

var _commands = require("../../commands");

var _handleKeyDown = _interopRequireDefault(require("./handleKeyDown"));

var _shortcuts = _interopRequireDefault(require("./shortcuts"));

function Textarea(props) {
  var prefixCls = props.prefixCls,
      other = (0, _objectWithoutProperties2.default)(props, ["prefixCls"]);

  var _useContext = (0, _react.useContext)(_Context.EditorContext),
      markdown = _useContext.markdown,
      commands = _useContext.commands,
      tabSize = _useContext.tabSize,
      _onChange = _useContext.onChange,
      dispatch = _useContext.dispatch;

  var textRef = /*#__PURE__*/_react.default.createRef();

  var executeRef = _react.default.useRef();

  (0, _react.useEffect)(function () {
    if (textRef.current && dispatch) {
      var commandOrchestrator = new _commands.TextAreaCommandOrchestrator(textRef.current);
      executeRef.current = commandOrchestrator;
      dispatch({
        textarea: textRef.current,
        commandOrchestrator: commandOrchestrator
      });
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);
  return (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react.default.createElement("textarea", (0, _extends2.default)({}, other, {
      ref: textRef,
      className: "".concat(prefixCls, "-text-input"),
      value: markdown,
      onScroll: props.onScroll,
      onKeyDown: function onKeyDown(e) {
        (0, _handleKeyDown.default)(e, tabSize);
        (0, _shortcuts.default)(e, commands, executeRef.current);
      },
      onChange: function onChange(e) {
        dispatch && dispatch({
          markdown: e.target.value
        });
        _onChange && _onChange(e.target.value);
      }
    }));
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [markdown]);
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL1RleHRhcmVhLnRzeCJdLCJuYW1lcyI6WyJUZXh0YXJlYSIsInByb3BzIiwicHJlZml4Q2xzIiwib3RoZXIiLCJFZGl0b3JDb250ZXh0IiwibWFya2Rvd24iLCJjb21tYW5kcyIsInRhYlNpemUiLCJvbkNoYW5nZSIsImRpc3BhdGNoIiwidGV4dFJlZiIsIlJlYWN0IiwiY3JlYXRlUmVmIiwiZXhlY3V0ZVJlZiIsInVzZVJlZiIsImN1cnJlbnQiLCJjb21tYW5kT3JjaGVzdHJhdG9yIiwiVGV4dEFyZWFDb21tYW5kT3JjaGVzdHJhdG9yIiwidGV4dGFyZWEiLCJvblNjcm9sbCIsImUiLCJ0YXJnZXQiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBU2UsU0FBU0EsUUFBVCxDQUFrQkMsS0FBbEIsRUFBd0M7QUFBQSxNQUM3Q0MsU0FENkMsR0FDckJELEtBRHFCLENBQzdDQyxTQUQ2QztBQUFBLE1BQy9CQyxLQUQrQiwwQ0FDckJGLEtBRHFCOztBQUFBLG9CQUVPLHVCQUFXRyxzQkFBWCxDQUZQO0FBQUEsTUFFN0NDLFFBRjZDLGVBRTdDQSxRQUY2QztBQUFBLE1BRW5DQyxRQUZtQyxlQUVuQ0EsUUFGbUM7QUFBQSxNQUV6QkMsT0FGeUIsZUFFekJBLE9BRnlCO0FBQUEsTUFFaEJDLFNBRmdCLGVBRWhCQSxRQUZnQjtBQUFBLE1BRU5DLFFBRk0sZUFFTkEsUUFGTTs7QUFHckQsTUFBTUMsT0FBTyxnQkFBR0MsZUFBTUMsU0FBTixFQUFoQjs7QUFDQSxNQUFNQyxVQUFVLEdBQUdGLGVBQU1HLE1BQU4sRUFBbkI7O0FBQ0Esd0JBQVUsWUFBTTtBQUNkLFFBQUlKLE9BQU8sQ0FBQ0ssT0FBUixJQUFtQk4sUUFBdkIsRUFBaUM7QUFDL0IsVUFBTU8sbUJBQW1CLEdBQUcsSUFBSUMscUNBQUosQ0FBZ0NQLE9BQU8sQ0FBQ0ssT0FBeEMsQ0FBNUI7QUFDQUYsTUFBQUEsVUFBVSxDQUFDRSxPQUFYLEdBQXFCQyxtQkFBckI7QUFDQVAsTUFBQUEsUUFBUSxDQUFDO0FBQUVTLFFBQUFBLFFBQVEsRUFBRVIsT0FBTyxDQUFDSyxPQUFwQjtBQUE2QkMsUUFBQUEsbUJBQW1CLEVBQW5CQTtBQUE3QixPQUFELENBQVI7QUFDRCxLQUxhLENBTWQ7O0FBQ0QsR0FQRCxFQU9HLEVBUEg7QUFRQSxTQUFPLG9CQUNMO0FBQUEsd0JBQ0Usb0VBQ01iLEtBRE47QUFFRSxNQUFBLEdBQUcsRUFBRU8sT0FGUDtBQUdFLE1BQUEsU0FBUyxZQUFLUixTQUFMLGdCQUhYO0FBSUUsTUFBQSxLQUFLLEVBQUVHLFFBSlQ7QUFLRSxNQUFBLFFBQVEsRUFBRUosS0FBSyxDQUFDa0IsUUFMbEI7QUFNRSxNQUFBLFNBQVMsRUFBRSxtQkFBQ0MsQ0FBRCxFQUFPO0FBQ2hCLG9DQUFjQSxDQUFkLEVBQWlCYixPQUFqQjtBQUNBLGdDQUFVYSxDQUFWLEVBQWFkLFFBQWIsRUFBdUJPLFVBQVUsQ0FBQ0UsT0FBbEM7QUFDRCxPQVRIO0FBVUUsTUFBQSxRQUFRLEVBQUUsa0JBQUNLLENBQUQsRUFBTztBQUNmWCxRQUFBQSxRQUFRLElBQUlBLFFBQVEsQ0FBQztBQUFFSixVQUFBQSxRQUFRLEVBQUVlLENBQUMsQ0FBQ0MsTUFBRixDQUFTQztBQUFyQixTQUFELENBQXBCO0FBQ0FkLFFBQUFBLFNBQVEsSUFBSUEsU0FBUSxDQUFDWSxDQUFDLENBQUNDLE1BQUYsQ0FBU0MsS0FBVixDQUFwQjtBQUNEO0FBYkgsT0FERjtBQUFBLEdBREssRUFrQkw7QUFDQSxHQUFDakIsUUFBRCxDQW5CSyxDQUFQO0FBcUJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IElQcm9wcyB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IEVkaXRvckNvbnRleHQgfSBmcm9tICcuLi8uLi9Db250ZXh0JztcbmltcG9ydCB7IFRleHRBcmVhQ29tbWFuZE9yY2hlc3RyYXRvciB9IGZyb20gJy4uLy4uL2NvbW1hbmRzJztcbmltcG9ydCBoYW5kbGVLZXlEb3duIGZyb20gJy4vaGFuZGxlS2V5RG93bic7XG5pbXBvcnQgc2hvcnRjdXRzIGZyb20gJy4vc2hvcnRjdXRzJztcbmltcG9ydCAnLi9pbmRleC5sZXNzJztcblxuZXhwb3J0IGludGVyZmFjZSBUZXh0QXJlYVByb3BzXG4gIGV4dGVuZHMgT21pdDxSZWFjdC5UZXh0YXJlYUhUTUxBdHRyaWJ1dGVzPEhUTUxUZXh0QXJlYUVsZW1lbnQ+LCAndmFsdWUnIHwgJ29uQ2hhbmdlJz4sXG4gICAgSVByb3BzIHtcbiAgb25DaGFuZ2U/OiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQ+KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUZXh0YXJlYShwcm9wczogVGV4dEFyZWFQcm9wcykge1xuICBjb25zdCB7IHByZWZpeENscywgLi4ub3RoZXIgfSA9IHByb3BzO1xuICBjb25zdCB7IG1hcmtkb3duLCBjb21tYW5kcywgdGFiU2l6ZSwgb25DaGFuZ2UsIGRpc3BhdGNoIH0gPSB1c2VDb250ZXh0KEVkaXRvckNvbnRleHQpO1xuICBjb25zdCB0ZXh0UmVmID0gUmVhY3QuY3JlYXRlUmVmPEhUTUxUZXh0QXJlYUVsZW1lbnQ+KCk7XG4gIGNvbnN0IGV4ZWN1dGVSZWYgPSBSZWFjdC51c2VSZWY8VGV4dEFyZWFDb21tYW5kT3JjaGVzdHJhdG9yPigpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0ZXh0UmVmLmN1cnJlbnQgJiYgZGlzcGF0Y2gpIHtcbiAgICAgIGNvbnN0IGNvbW1hbmRPcmNoZXN0cmF0b3IgPSBuZXcgVGV4dEFyZWFDb21tYW5kT3JjaGVzdHJhdG9yKHRleHRSZWYuY3VycmVudCk7XG4gICAgICBleGVjdXRlUmVmLmN1cnJlbnQgPSBjb21tYW5kT3JjaGVzdHJhdG9yO1xuICAgICAgZGlzcGF0Y2goeyB0ZXh0YXJlYTogdGV4dFJlZi5jdXJyZW50LCBjb21tYW5kT3JjaGVzdHJhdG9yIH0pO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcbiAgcmV0dXJuIHVzZU1lbW8oXG4gICAgKCkgPT4gKFxuICAgICAgPHRleHRhcmVhXG4gICAgICAgIHsuLi5vdGhlcn1cbiAgICAgICAgcmVmPXt0ZXh0UmVmfVxuICAgICAgICBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tdGV4dC1pbnB1dGB9XG4gICAgICAgIHZhbHVlPXttYXJrZG93bn1cbiAgICAgICAgb25TY3JvbGw9e3Byb3BzLm9uU2Nyb2xsfVxuICAgICAgICBvbktleURvd249eyhlKSA9PiB7XG4gICAgICAgICAgaGFuZGxlS2V5RG93bihlLCB0YWJTaXplKTtcbiAgICAgICAgICBzaG9ydGN1dHMoZSwgY29tbWFuZHMsIGV4ZWN1dGVSZWYuY3VycmVudCk7XG4gICAgICAgIH19XG4gICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4ge1xuICAgICAgICAgIGRpc3BhdGNoICYmIGRpc3BhdGNoKHsgbWFya2Rvd246IGUudGFyZ2V0LnZhbHVlIH0pO1xuICAgICAgICAgIG9uQ2hhbmdlICYmIG9uQ2hhbmdlKGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgKSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgW21hcmtkb3duXSxcbiAgKTtcbn1cbiJdfQ==