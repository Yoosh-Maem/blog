"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Markdown;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _prismjs = _interopRequireDefault(require("prismjs"));

var _Context = require("../../Context");

function Markdown(props) {
  var prefixCls = props.prefixCls,
      other = (0, _objectWithoutProperties2.default)(props, ["prefixCls"]);

  var _useContext = (0, _react.useContext)(_Context.EditorContext),
      _useContext$markdown = _useContext.markdown,
      markdown = _useContext$markdown === void 0 ? '' : _useContext$markdown,
      highlightEnable = _useContext.highlightEnable,
      dispatch = _useContext.dispatch;

  var preRef = /*#__PURE__*/_react.default.createRef();

  (0, _react.useEffect)(function () {
    if (preRef.current && dispatch) {
      dispatch({
        textareaPre: preRef.current
      });
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);

  var highlight = function highlight() {
    if (!preRef.current) return;

    if (highlightEnable && typeof markdown === 'string') {
      var html = _prismjs.default.highlight(markdown, _prismjs.default.languages.markdown, 'markdown');

      preRef.current.innerHTML = "".concat(html);
    } else {
      preRef.current.innerText = "".concat(markdown);
    }
  };

  (0, _react.useEffect)(function () {
    highlight(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [markdown, preRef.current, highlightEnable]);
  return (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react.default.createElement("pre", (0, _extends2.default)({}, other, {
      ref: preRef,
      className: "".concat(prefixCls, "-text-pre wmde-markdown-color")
    }));
  }, [other, preRef, prefixCls]);
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL01hcmtkb3duLnRzeCJdLCJuYW1lcyI6WyJNYXJrZG93biIsInByb3BzIiwicHJlZml4Q2xzIiwib3RoZXIiLCJFZGl0b3JDb250ZXh0IiwibWFya2Rvd24iLCJoaWdobGlnaHRFbmFibGUiLCJkaXNwYXRjaCIsInByZVJlZiIsIlJlYWN0IiwiY3JlYXRlUmVmIiwiY3VycmVudCIsInRleHRhcmVhUHJlIiwiaGlnaGxpZ2h0IiwiaHRtbCIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiaW5uZXJIVE1MIiwiaW5uZXJUZXh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFLZSxTQUFTQSxRQUFULENBQWtCQyxLQUFsQixFQUF3QztBQUFBLE1BQzdDQyxTQUQ2QyxHQUNyQkQsS0FEcUIsQ0FDN0NDLFNBRDZDO0FBQUEsTUFDL0JDLEtBRCtCLDBDQUNyQkYsS0FEcUI7O0FBQUEsb0JBRUEsdUJBQVdHLHNCQUFYLENBRkE7QUFBQSx5Q0FFN0NDLFFBRjZDO0FBQUEsTUFFN0NBLFFBRjZDLHFDQUVsQyxFQUZrQztBQUFBLE1BRTlCQyxlQUY4QixlQUU5QkEsZUFGOEI7QUFBQSxNQUViQyxRQUZhLGVBRWJBLFFBRmE7O0FBR3JELE1BQU1DLE1BQU0sZ0JBQUdDLGVBQU1DLFNBQU4sRUFBZjs7QUFDQSx3QkFBVSxZQUFNO0FBQ2QsUUFBSUYsTUFBTSxDQUFDRyxPQUFQLElBQWtCSixRQUF0QixFQUFnQztBQUM5QkEsTUFBQUEsUUFBUSxDQUFDO0FBQUVLLFFBQUFBLFdBQVcsRUFBRUosTUFBTSxDQUFDRztBQUF0QixPQUFELENBQVI7QUFDRCxLQUhhLENBSWQ7O0FBQ0QsR0FMRCxFQUtHLEVBTEg7O0FBTUEsTUFBTUUsU0FBUyxHQUFHLFNBQVpBLFNBQVksR0FBTTtBQUN0QixRQUFJLENBQUNMLE1BQU0sQ0FBQ0csT0FBWixFQUFxQjs7QUFDckIsUUFBSUwsZUFBZSxJQUFJLE9BQU9ELFFBQVAsS0FBb0IsUUFBM0MsRUFBcUQ7QUFDbkQsVUFBTVMsSUFBSSxHQUFHQyxpQkFBTUYsU0FBTixDQUFnQlIsUUFBaEIsRUFBb0NVLGlCQUFNQyxTQUFOLENBQWdCWCxRQUFwRCxFQUE4RCxVQUE5RCxDQUFiOztBQUNBRyxNQUFBQSxNQUFNLENBQUNHLE9BQVAsQ0FBZU0sU0FBZixhQUE4QkgsSUFBOUI7QUFDRCxLQUhELE1BR087QUFDTE4sTUFBQUEsTUFBTSxDQUFDRyxPQUFQLENBQWVPLFNBQWYsYUFBOEJiLFFBQTlCO0FBQ0Q7QUFDRixHQVJEOztBQVNBLHdCQUFVLFlBQU07QUFDZFEsSUFBQUEsU0FBUyxHQURLLENBRWQ7QUFDRCxHQUhELEVBR0csQ0FBQ1IsUUFBRCxFQUFXRyxNQUFNLENBQUNHLE9BQWxCLEVBQTJCTCxlQUEzQixDQUhIO0FBS0EsU0FBTyxvQkFBUTtBQUFBLHdCQUFNLCtEQUFTSCxLQUFUO0FBQWdCLE1BQUEsR0FBRyxFQUFFSyxNQUFyQjtBQUE2QixNQUFBLFNBQVMsWUFBS04sU0FBTDtBQUF0QyxPQUFOO0FBQUEsR0FBUixFQUF1RyxDQUM1R0MsS0FENEcsRUFFNUdLLE1BRjRHLEVBRzVHTixTQUg0RyxDQUF2RyxDQUFQO0FBS0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSVByb3BzIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IFByaXNtIGZyb20gJ3ByaXNtanMnO1xuaW1wb3J0IHsgRWRpdG9yQ29udGV4dCB9IGZyb20gJy4uLy4uL0NvbnRleHQnO1xuaW1wb3J0ICcuL2luZGV4Lmxlc3MnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1hcmtkb3duUHJvcHMgZXh0ZW5kcyBJUHJvcHMsIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxQcmVFbGVtZW50PiB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNYXJrZG93bihwcm9wczogTWFya2Rvd25Qcm9wcykge1xuICBjb25zdCB7IHByZWZpeENscywgLi4ub3RoZXIgfSA9IHByb3BzO1xuICBjb25zdCB7IG1hcmtkb3duID0gJycsIGhpZ2hsaWdodEVuYWJsZSwgZGlzcGF0Y2ggfSA9IHVzZUNvbnRleHQoRWRpdG9yQ29udGV4dCk7XG4gIGNvbnN0IHByZVJlZiA9IFJlYWN0LmNyZWF0ZVJlZjxIVE1MUHJlRWxlbWVudD4oKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocHJlUmVmLmN1cnJlbnQgJiYgZGlzcGF0Y2gpIHtcbiAgICAgIGRpc3BhdGNoKHsgdGV4dGFyZWFQcmU6IHByZVJlZi5jdXJyZW50IH0pO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcbiAgY29uc3QgaGlnaGxpZ2h0ID0gKCkgPT4ge1xuICAgIGlmICghcHJlUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICBpZiAoaGlnaGxpZ2h0RW5hYmxlICYmIHR5cGVvZiBtYXJrZG93biA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IGh0bWwgPSBQcmlzbS5oaWdobGlnaHQobWFya2Rvd24gYXMgc3RyaW5nLCBQcmlzbS5sYW5ndWFnZXMubWFya2Rvd24sICdtYXJrZG93bicpO1xuICAgICAgcHJlUmVmLmN1cnJlbnQuaW5uZXJIVE1MID0gYCR7aHRtbH1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmVSZWYuY3VycmVudC5pbm5lclRleHQgPSBgJHttYXJrZG93bn1gO1xuICAgIH1cbiAgfTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBoaWdobGlnaHQoKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFttYXJrZG93biwgcHJlUmVmLmN1cnJlbnQsIGhpZ2hsaWdodEVuYWJsZV0pO1xuXG4gIHJldHVybiB1c2VNZW1vKCgpID0+IDxwcmUgey4uLm90aGVyfSByZWY9e3ByZVJlZn0gY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXRleHQtcHJlIHdtZGUtbWFya2Rvd24tY29sb3JgfSAvPiwgW1xuICAgIG90aGVyLFxuICAgIHByZVJlZixcbiAgICBwcmVmaXhDbHMsXG4gIF0pO1xufVxuIl19