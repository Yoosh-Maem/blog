"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.codeBlock = exports.code = void 0;

var React = _interopRequireWildcard(require("react"));

var _markdownUtils = require("../utils/markdownUtils");

var code = {
  name: 'code',
  keyCommand: 'code',
  shortcuts: 'ctrlcmd+j',
  buttonProps: {
    'aria-label': 'Insert code'
  },
  icon: /*#__PURE__*/React.createElement("svg", {
    width: "12",
    height: "12",
    role: "img",
    viewBox: "0 0 640 512"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "currentColor",
    d: "M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z"
  })),
  execute: function execute(tate, api) {
    // Adjust the selection to encompass the whole word if the caret is inside one
    var newSelectionRange = (0, _markdownUtils.selectWord)({
      text: tate.text,
      selection: tate.selection
    });
    var state1 = api.setSelectionRange(newSelectionRange); // when there's no breaking line

    if (state1.selectedText.indexOf('\n') === -1) {
      api.replaceSelection("`".concat(state1.selectedText, "`")); // Adjust the selection to not contain the **

      var _selectionStart = state1.selection.start + 1;

      var _selectionEnd = _selectionStart + state1.selectedText.length;

      api.setSelectionRange({
        start: _selectionStart,
        end: _selectionEnd
      });
      return;
    }

    var breaksBeforeCount = (0, _markdownUtils.getBreaksNeededForEmptyLineBefore)(state1.text, state1.selection.start);
    var breaksBefore = Array(breaksBeforeCount + 1).join('\n');
    var breaksAfterCount = (0, _markdownUtils.getBreaksNeededForEmptyLineAfter)(state1.text, state1.selection.end);
    var breaksAfter = Array(breaksAfterCount + 1).join('\n');
    api.replaceSelection("".concat(breaksBefore, "```\n").concat(state1.selectedText, "\n```").concat(breaksAfter));
    var selectionStart = state1.selection.start + breaksBeforeCount + 4;
    var selectionEnd = selectionStart + state1.selectedText.length;
    api.setSelectionRange({
      start: selectionStart,
      end: selectionEnd
    });
  }
};
exports.code = code;
var codeBlock = {
  name: 'codeBlock',
  keyCommand: 'codeBlock',
  shortcuts: 'ctrlcmd+shift+j',
  execute: function execute(tate, api) {
    // Adjust the selection to encompass the whole word if the caret is inside one
    var newSelectionRange = (0, _markdownUtils.selectWord)({
      text: tate.text,
      selection: tate.selection
    });
    var state1 = api.setSelectionRange(newSelectionRange);
    var breaksBeforeCount = (0, _markdownUtils.getBreaksNeededForEmptyLineBefore)(state1.text, state1.selection.start);
    var breaksBefore = Array(breaksBeforeCount + 1).join('\n');
    var breaksAfterCount = (0, _markdownUtils.getBreaksNeededForEmptyLineAfter)(state1.text, state1.selection.end);
    var breaksAfter = Array(breaksAfterCount + 1).join('\n');
    api.replaceSelection("".concat(breaksBefore, "```\n").concat(state1.selectedText, "\n```").concat(breaksAfter));
    var selectionStart = state1.selection.start + breaksBeforeCount + 4;
    var selectionEnd = selectionStart + state1.selectedText.length;
    api.setSelectionRange({
      start: selectionStart,
      end: selectionEnd
    });
  }
};
exports.codeBlock = codeBlock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9jb2RlLnRzeCJdLCJuYW1lcyI6WyJjb2RlIiwibmFtZSIsImtleUNvbW1hbmQiLCJzaG9ydGN1dHMiLCJidXR0b25Qcm9wcyIsImljb24iLCJleGVjdXRlIiwidGF0ZSIsImFwaSIsIm5ld1NlbGVjdGlvblJhbmdlIiwidGV4dCIsInNlbGVjdGlvbiIsInN0YXRlMSIsInNldFNlbGVjdGlvblJhbmdlIiwic2VsZWN0ZWRUZXh0IiwiaW5kZXhPZiIsInJlcGxhY2VTZWxlY3Rpb24iLCJzZWxlY3Rpb25TdGFydCIsInN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibGVuZ3RoIiwiZW5kIiwiYnJlYWtzQmVmb3JlQ291bnQiLCJicmVha3NCZWZvcmUiLCJBcnJheSIsImpvaW4iLCJicmVha3NBZnRlckNvdW50IiwiYnJlYWtzQWZ0ZXIiLCJjb2RlQmxvY2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBOztBQU1PLElBQU1BLElBQWMsR0FBRztBQUM1QkMsRUFBQUEsSUFBSSxFQUFFLE1BRHNCO0FBRTVCQyxFQUFBQSxVQUFVLEVBQUUsTUFGZ0I7QUFHNUJDLEVBQUFBLFNBQVMsRUFBRSxXQUhpQjtBQUk1QkMsRUFBQUEsV0FBVyxFQUFFO0FBQUUsa0JBQWM7QUFBaEIsR0FKZTtBQUs1QkMsRUFBQUEsSUFBSSxlQUNGO0FBQUssSUFBQSxLQUFLLEVBQUMsSUFBWDtBQUFnQixJQUFBLE1BQU0sRUFBQyxJQUF2QjtBQUE0QixJQUFBLElBQUksRUFBQyxLQUFqQztBQUF1QyxJQUFBLE9BQU8sRUFBQztBQUEvQyxrQkFDRTtBQUNFLElBQUEsSUFBSSxFQUFDLGNBRFA7QUFFRSxJQUFBLENBQUMsRUFBQztBQUZKLElBREYsQ0FOMEI7QUFhNUJDLEVBQUFBLE9BQU8sRUFBRSxpQkFBQ0MsSUFBRCxFQUFrQkMsR0FBbEIsRUFBbUM7QUFDMUM7QUFDQSxRQUFNQyxpQkFBaUIsR0FBRywrQkFBVztBQUFFQyxNQUFBQSxJQUFJ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TUFBTSxDQUFDRCxTQUFQLENBQWlCVSxHQUEvRCxDQUF6QjtBQUNBLFFBQU1NLFdBQVcsR0FBR0gsS0FBSyxDQUFDRSxnQkFBZ0IsR0FBRyxDQUFwQixDQUFMLENBQTRCRCxJQUE1QixDQUFpQyxJQUFqQyxDQUFwQjtBQUVBakIsSUFBQUEsR0FBRyxDQUFDUSxnQkFBSixXQUF3Qk8sWUFBeEIsa0JBQStDWCxNQUFNLENBQUNFLFlBQXRELGtCQUE2RWEsV0FBN0U7QUFFQSxRQUFNVixjQUFjLEdBQUdMLE1BQU0sQ0FBQ0QsU0FBUCxDQUFpQk8sS0FBakIsR0FBeUJJLGlCQUF6QixHQUE2QyxDQUFwRTtBQUNBLFFBQU1ILFlBQVksR0FBR0YsY0FBYyxHQUFHTCxNQUFNLENBQUNFLFlBQVAsQ0FBb0JNLE1BQTFEO0FBRUFaLElBQUFBLEdBQUcsQ0FBQ0ssaUJBQUosQ0FBc0I7QUFDcEJLLE1BQUFBLEtBQUssRUFBRUQsY0FEYTtBQUVwQkksTUFBQUEsR0FBRyxFQUFFRjtBQUZlLEtBQXRCO0FBSUQ7QUF4QmdDLENBQTVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSUNvbW1hbmQsIFRleHRTdGF0ZSwgVGV4dEFwaSB9IGZyb20gJy4vJztcbmltcG9ydCB7XG4gIHNlbGVjdFdvcmQsXG4gIGdldEJyZWFrc05lZWRlZEZvckVtcHR5TGluZUJlZm9yZSxcbiAgZ2V0QnJlYWtzTmVlZGVkRm9yRW1wdHlMaW5lQWZ0ZXIsXG59IGZyb20gJy4uL3V0aWxzL21hcmtkb3duVXRpbHMnO1xuXG5leHBvcnQgY29uc3QgY29kZTogSUNvbW1hbmQgPSB7XG4gIG5hbWU6ICdjb2RlJyxcbiAga2V5Q29tbWFuZDogJ2NvZGUnLFxuICBzaG9ydGN1dHM6ICdjdHJsY21kK2onLFxuICBidXR0b25Qcm9wczogeyAnYXJpYS1sYWJlbCc6ICdJbnNlcnQgY29kZScgfSxcbiAgaWNvbjogKFxuICAgIDxzdmcgd2lkdGg9XCIxMlwiIGhlaWdodD1cIjEyXCIgcm9sZT1cImltZ1wiIHZpZXdCb3g9XCIwIDAgNjQwIDUxMlwiPlxuICAgICAgPHBhdGhcbiAgICAgICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgICAgIGQ9XCJNMjc4LjkgNTExLjVsLTYxLTE3LjdjLTYuNC0xLjgtMTAtOC41LTguMi0xNC45TDM0Ni4yIDguN2MxLjgtNi40IDguNS0xMCAxNC45LTguMmw2MSAxNy43YzYuNCAxLjggMTAgOC41IDguMiAxNC45TDI5My44IDUwMy4zYy0xLjkgNi40LTguNSAxMC4xLTE0LjkgOC4yem0tMTE0LTExMi4ybDQzLjUtNDYuNGM0LjYtNC45IDQuMy0xMi43LS44LTE3LjJMMTE3IDI1Nmw5MC42LTc5LjdjNS4xLTQuNSA1LjUtMTIuMy44LTE3LjJsLTQzLjUtNDYuNGMtNC41LTQuOC0xMi4xLTUuMS0xNy0uNUwzLjggMjQ3LjJjLTUuMSA0LjctNS4xIDEyLjggMCAxNy41bDE0NC4xIDEzNS4xYzQuOSA0LjYgMTIuNSA0LjQgMTctLjV6bTMyNy4yLjZsMTQ0LjEtMTM1LjFjNS4xLTQuNyA1LjEtMTIuOCAwLTE3LjVMNDkyLjEgMTEyLjFjLTQuOC00LjUtMTIuNC00LjMtMTcgLjVMNDMxLjYgMTU5Yy00LjYgNC45LTQuMyAxMi43LjggMTcuMkw1MjMgMjU2bC05MC42IDc5LjdjLTUuMSA0LjUtNS41IDEyLjMtLjggMTcuMmw0My41IDQ2LjRjNC41IDQuOSAxMi4xIDUuMSAxNyAuNnpcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKSxcbiAgZXhlY3V0ZTogKHRhdGU6IFRleHRTdGF0ZSwgYXBpOiBUZXh0QXBpKSA9PiB7XG4gICAgLy8gQWRqdXN0IHRoZSBzZWxlY3Rpb24gdG8gZW5jb21wYXNzIHRoZSB3aG9sZSB3b3JkIGlmIHRoZSBjYXJldCBpcyBpbnNpZGUgb25lXG4gICAgY29uc3QgbmV3U2VsZWN0aW9uUmFuZ2UgPSBzZWxlY3RXb3JkKHsgdGV4dDogdGF0ZS50ZXh0LCBzZWxlY3Rpb246IHRhdGUuc2VsZWN0aW9uIH0pO1xuICAgIGNvbnN0IHN0YXRlMSA9IGFwaS5zZXRTZWxlY3Rpb25SYW5nZShuZXdTZWxlY3Rpb25SYW5nZSk7XG4gICAgLy8gd2hlbiB0aGVyZSdzIG5vIGJyZWFraW5nIGxpbmVcbiAgICBpZiAoc3RhdGUxLnNlbGVjdGVkVGV4dC5pbmRleE9mKCdcXG4nKSA9PT0gLTEpIHtcbiAgICAgIGFwaS5yZXBsYWNlU2VsZWN0aW9uKGBcXGAke3N0YXRlMS5zZWxlY3RlZFRleHR9XFxgYCk7XG4gICAgICAvLyBBZGp1c3QgdGhlIHNlbGVjdGlvbiB0byBub3QgY29udGFpbiB0aGUgKipcblxuICAgICAgY29uc3Qgc2VsZWN0aW9uU3RhcnQgPSBzdGF0ZTEuc2VsZWN0aW9uLnN0YXJ0ICsgMTtcbiAgICAgIGNvbnN0IHNlbGVjdGlvbkVuZCA9IHNlbGVjdGlvblN0YXJ0ICsgc3RhdGUxLnNlbGVjdGVkVGV4dC5sZW5ndGg7XG5cbiAgICAgIGFwaS5zZXRTZWxlY3Rpb25SYW5nZSh7XG4gICAgICAgIHN0YXJ0OiBzZWxlY3Rpb25TdGFydCxcbiAgICAgICAgZW5kOiBzZWxlY3Rpb25FbmQsXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBicmVha3NCZWZvcmVDb3VudCA9IGdldEJyZWFrc05lZWRlZEZvckVtcHR5TGluZUJlZm9yZShzdGF0ZTEudGV4dCwgc3RhdGUxLnNlbGVjdGlvbi5zdGFydCk7XG4gICAgY29uc3QgYnJlYWtzQmVmb3JlID0gQXJyYXkoYnJlYWtzQmVmb3JlQ291bnQgKyAxKS5qb2luKCdcXG4nKTtcblxuICAgIGNvbnN0IGJyZWFrc0FmdGVyQ291bnQgPSBnZXRCcmVha3NOZWVkZWRGb3JFbXB0eUxpbmVBZnRlcihzdGF0ZTEudGV4dCwgc3RhdGUxLnNlbGVjdGlvbi5lbmQpO1xuICAgIGNvbnN0IGJyZWFrc0FmdGVyID0gQXJyYXkoYnJlYWtzQWZ0ZXJDb3VudCArIDEpLmpvaW4oJ1xcbicpO1xuXG4gICAgYXBpLnJlcGxhY2VTZWxlY3Rpb24oYCR7YnJlYWtzQmVmb3JlfVxcYFxcYFxcYFxcbiR7c3RhdGUxLnNlbGVjdGVkVGV4dH1cXG5cXGBcXGBcXGAke2JyZWFrc0FmdGVyfWApO1xuXG4gICAgY29uc3Qgc2VsZWN0aW9uU3RhcnQgPSBzdGF0ZTEuc2VsZWN0aW9uLnN0YXJ0ICsgYnJlYWtzQmVmb3JlQ291bnQgKyA0O1xuICAgIGNvbnN0IHNlbGVjdGlvbkVuZCA9IHNlbGVjdGlvblN0YXJ0ICsgc3RhdGUxLnNlbGVjdGVkVGV4dC5sZW5ndGg7XG5cbiAgICBhcGkuc2V0U2VsZWN0aW9uUmFuZ2Uoe1xuICAgICAgc3RhcnQ6IHNlbGVjdGlvblN0YXJ0LFxuICAgICAgZW5kOiBzZWxlY3Rpb25FbmQsXG4gICAgfSk7XG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgY29kZUJsb2NrOiBJQ29tbWFuZCA9IHtcbiAgbmFtZTogJ2NvZGVCbG9jaycsXG4gIGtleUNvbW1hbmQ6ICdjb2RlQmxvY2snLFxuICBzaG9ydGN1dHM6ICdjdHJsY21kK3NoaWZ0K2onLFxuICBleGVjdXRlOiAodGF0ZTogVGV4dFN0YXRlLCBhcGk6IFRleHRBcGkpID0+IHtcbiAgICAvLyBBZGp1c3QgdGhlIHNlbGVjdGlvbiB0byBlbmNvbXBhc3MgdGhlIHdob2xlIHdvcmQgaWYgdGhlIGNhcmV0IGlzIGluc2lkZSBvbmVcbiAgICBjb25zdCBuZXdTZWxlY3Rpb25SYW5nZSA9IHNlbGVjdFdvcmQoeyB0ZXh0OiB0YXRlLnRleHQsIHNlbGVjdGlvbjogdGF0ZS5zZWxlY3Rpb24gfSk7XG4gICAgY29uc3Qgc3RhdGUxID0gYXBpLnNldFNlbGVjdGlvblJhbmdlKG5ld1NlbGVjdGlvblJhbmdlKTtcblxuICAgIGNvbnN0IGJyZWFrc0JlZm9yZUNvdW50ID0gZ2V0QnJlYWtzTmVlZGVkRm9yRW1wdHlMaW5lQmVmb3JlKHN0YXRlMS50ZXh0LCBzdGF0ZTEuc2VsZWN0aW9uLnN0YXJ0KTtcbiAgICBjb25zdCBicmVha3NCZWZvcmUgPSBBcnJheShicmVha3NCZWZvcmVDb3VudCArIDEpLmpvaW4oJ1xcbicpO1xuXG4gICAgY29uc3QgYnJlYWtzQWZ0ZXJDb3VudCA9IGdldEJyZWFrc05lZWRlZEZvckVtcHR5TGluZUFmdGVyKHN0YXRlMS50ZXh0LCBzdGF0ZTEuc2VsZWN0aW9uLmVuZCk7XG4gICAgY29uc3QgYnJlYWtzQWZ0ZXIgPSBBcnJheShicmVha3NBZnRlckNvdW50ICsgMSkuam9pbignXFxuJyk7XG5cbiAgICBhcGkucmVwbGFjZVNlbGVjdGlvbihgJHticmVha3NCZWZvcmV9XFxgXFxgXFxgXFxuJHtzdGF0ZTEuc2VsZWN0ZWRUZXh0fVxcblxcYFxcYFxcYCR7YnJlYWtzQWZ0ZXJ9YCk7XG5cbiAgICBjb25zdCBzZWxlY3Rpb25TdGFydCA9IHN0YXRlMS5zZWxlY3Rpb24uc3RhcnQgKyBicmVha3NCZWZvcmVDb3VudCArIDQ7XG4gICAgY29uc3Qgc2VsZWN0aW9uRW5kID0gc2VsZWN0aW9uU3RhcnQgKyBzdGF0ZTEuc2VsZWN0ZWRUZXh0Lmxlbmd0aDtcblxuICAgIGFwaS5zZXRTZWxlY3Rpb25SYW5nZSh7XG4gICAgICBzdGFydDogc2VsZWN0aW9uU3RhcnQsXG4gICAgICBlbmQ6IHNlbGVjdGlvbkVuZCxcbiAgICB9KTtcbiAgfSxcbn07XG4iXX0=